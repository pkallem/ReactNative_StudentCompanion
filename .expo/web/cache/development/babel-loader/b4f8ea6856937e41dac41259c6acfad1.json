{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\prana\\\\Desktop\\\\iits-app-main\\\\node_modules\\\\react-native-elements\\\\src\\\\config\\\\ThemeProvider.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport merge from 'lodash.merge';\nimport colors from \"./colors\";\nvar ThemeContext = React.createContext();\n\nvar ThemeProvider = function (_React$Component) {\n  _inherits(ThemeProvider, _React$Component);\n\n  var _super = _createSuper(ThemeProvider);\n\n  function ThemeProvider(props) {\n    var _this;\n\n    _classCallCheck(this, ThemeProvider);\n\n    _this = _super.call(this, props);\n\n    _this.updateTheme = function (updates) {\n      _this.setState(function (_ref) {\n        var theme = _ref.theme;\n        return {\n          theme: merge(theme, updates)\n        };\n      });\n    };\n\n    _this.getTheme = function () {\n      return _this.state.theme;\n    };\n\n    _this.state = {\n      theme: merge({\n        colors: colors\n      }, props.theme)\n    };\n    return _this;\n  }\n\n  _createClass(ThemeProvider, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(ThemeContext.Provider, {\n        value: {\n          theme: this.state.theme,\n          updateTheme: this.updateTheme\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 7\n        }\n      }, this.props.children);\n    }\n  }]);\n\n  return ThemeProvider;\n}(React.Component);\n\nexport { ThemeProvider as default };\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired\n};\nexport var ThemeConsumer = ThemeContext.Consumer;","map":{"version":3,"sources":["C:/Users/prana/Desktop/iits-app-main/node_modules/react-native-elements/src/config/ThemeProvider.js"],"names":["React","PropTypes","merge","colors","ThemeContext","createContext","ThemeProvider","props","updateTheme","updates","setState","theme","getTheme","state","children","Component","propTypes","object","node","isRequired","ThemeConsumer","Consumer"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,KAAP,MAAkB,cAAlB;AAEA,OAAOC,MAAP;AAEA,IAAMC,YAAY,GAAGJ,KAAK,CAACK,aAAN,EAArB;;IAEqBC,a;;;;;AACnB,yBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;;AADiB,UAanBC,WAbmB,GAaL,UAAAC,OAAO,EAAI;AACvB,YAAKC,QAAL,CAAc;AAAA,YAAGC,KAAH,QAAGA,KAAH;AAAA,eAAgB;AAC5BA,UAAAA,KAAK,EAAET,KAAK,CAACS,KAAD,EAAQF,OAAR;AADgB,SAAhB;AAAA,OAAd;AAGD,KAjBkB;;AAAA,UAmBnBG,QAnBmB,GAmBR,YAAM;AACf,aAAO,MAAKC,KAAL,CAAWF,KAAlB;AACD,KArBkB;;AAGjB,UAAKE,KAAL,GAAa;AACXF,MAAAA,KAAK,EAAET,KAAK,CACV;AACEC,QAAAA,MAAM,EAANA;AADF,OADU,EAIVI,KAAK,CAACI,KAJI;AADD,KAAb;AAHiB;AAWlB;;;;WAYD,kBAAS;AACP,aACE,oBAAC,YAAD,CAAc,QAAd;AACE,QAAA,KAAK,EAAE;AACLA,UAAAA,KAAK,EAAE,KAAKE,KAAL,CAAWF,KADb;AAELH,UAAAA,WAAW,EAAE,KAAKA;AAFb,SADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAMG,KAAKD,KAAL,CAAWO,QANd,CADF;AAUD;;;;EAnCwCd,KAAK,CAACe,S;;SAA5BT,a;AAsCrBA,aAAa,CAACU,SAAd,GAA0B;AACxBL,EAAAA,KAAK,EAAEV,SAAS,CAACgB,MADO;AAExBH,EAAAA,QAAQ,EAAEb,SAAS,CAACiB,IAAV,CAAeC;AAFD,CAA1B;AAKA,OAAO,IAAMC,aAAa,GAAGhB,YAAY,CAACiB,QAAnC","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport merge from 'lodash.merge';\n\nimport colors from './colors';\n\nconst ThemeContext = React.createContext();\n\nexport default class ThemeProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      theme: merge(\n        {\n          colors,\n        },\n        props.theme\n      ),\n    };\n  }\n\n  updateTheme = updates => {\n    this.setState(({ theme }) => ({\n      theme: merge(theme, updates),\n    }));\n  };\n\n  getTheme = () => {\n    return this.state.theme;\n  };\n\n  render() {\n    return (\n      <ThemeContext.Provider\n        value={{\n          theme: this.state.theme,\n          updateTheme: this.updateTheme,\n        }}\n      >\n        {this.props.children}\n      </ThemeContext.Provider>\n    );\n  }\n}\n\nThemeProvider.propTypes = {\n  theme: PropTypes.object,\n  children: PropTypes.node.isRequired,\n};\n\nexport const ThemeConsumer = ThemeContext.Consumer;\n"]},"metadata":{},"sourceType":"module"}