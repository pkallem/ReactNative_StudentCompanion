{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { SyntheticPlatformEmitter } from '@unimodules/core';\nimport { isSensorEnabledAsync, assertSensorEventEnabledAsync } from \"./utils/isSensorEnabledAsync.web\";\nvar scalar = Math.PI / 180;\nvar eventName = 'deviceorientation';\nexport default {\n  get name() {\n    return 'ExponentAccelerometer';\n  },\n\n  isAvailableAsync: function isAvailableAsync() {\n    return _regeneratorRuntime.async(function isAvailableAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(typeof DeviceOrientationEvent === 'undefined')) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 2:\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(isSensorEnabledAsync(eventName));\n\n          case 4:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  },\n  _handleMotion: function _handleMotion(_ref) {\n    var alpha = _ref.alpha,\n        beta = _ref.beta,\n        gamma = _ref.gamma;\n    SyntheticPlatformEmitter.emit('accelerometerDidUpdate', {\n      x: gamma * scalar,\n      y: beta * scalar,\n      z: alpha * scalar\n    });\n  },\n  startObserving: function startObserving() {\n    assertSensorEventEnabledAsync(eventName);\n    window.addEventListener(eventName, this._handleMotion);\n  },\n  stopObserving: function stopObserving() {\n    window.removeEventListener(eventName, this._handleMotion);\n  }\n};","map":{"version":3,"sources":["../src/ExponentAccelerometer.web.ts"],"names":[],"mappings":";AAAA,SAAS,wBAAT,QAAyC,kBAAzC;AAEA,SACE,oBADF,EAEE,6BAFF;AAKA,IAAM,MAAM,GAAG,IAAI,CAAC,EAAL,GAAU,GAAzB;AACA,IAAM,SAAS,GAAG,mBAAlB;AAEA,eAAe;AACb,MAAI,IAAJ,GAAQ;AACN,WAAO,uBAAP;AACD,GAHY;;AAIP,EAAA,gBAJO;AAAA;AAAA;AAAA;AAAA;AAAA,kBAKP,OAAO,sBAAP,KAAkC,WAL3B;AAAA;AAAA;AAAA;;AAAA,6CAMF,KANE;;AAAA;AAAA;AAAA,6CAQE,oBAAoB,CAAC,SAAD,CARtB;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAUb,EAAA,aAVa,+BAUuB;AAAA,QAApB,KAAoB,QAApB,KAAoB;AAAA,QAAb,IAAa,QAAb,IAAa;AAAA,QAAP,KAAO,QAAP,KAAO;AAClC,IAAA,wBAAwB,CAAC,IAAzB,CAA8B,wBAA9B,EAAwD;AACtD,MAAA,CAAC,EAAE,KAAK,GAAG,MAD2C;AAEtD,MAAA,CAAC,EAAE,IAAI,GAAG,MAF4C;AAGtD,MAAA,CAAC,EAAE,KAAK,GAAG;AAH2C,KAAxD;AAKD,GAhBY;AAiBb,EAAA,cAjBa,4BAiBC;AACZ,IAAA,6BAA6B,CAAC,SAAD,CAA7B;AACA,IAAA,MAAM,CAAC,gBAAP,CAAwB,SAAxB,EAAmC,KAAK,aAAxC;AACD,GApBY;AAqBb,EAAA,aArBa,2BAqBA;AACX,IAAA,MAAM,CAAC,mBAAP,CAA2B,SAA3B,EAAsC,KAAK,aAA3C;AACD;AAvBY,CAAf","sourcesContent":["import { SyntheticPlatformEmitter } from '@unimodules/core';\n\nimport {\n  isSensorEnabledAsync,\n  assertSensorEventEnabledAsync,\n} from './utils/isSensorEnabledAsync.web';\n\nconst scalar = Math.PI / 180;\nconst eventName = 'deviceorientation';\n\nexport default {\n  get name(): string {\n    return 'ExponentAccelerometer';\n  },\n  async isAvailableAsync(): Promise<boolean> {\n    if (typeof DeviceOrientationEvent === 'undefined') {\n      return false;\n    }\n    return await isSensorEnabledAsync(eventName);\n  },\n  _handleMotion({ alpha, beta, gamma }) {\n    SyntheticPlatformEmitter.emit('accelerometerDidUpdate', {\n      x: gamma * scalar,\n      y: beta * scalar,\n      z: alpha * scalar,\n    });\n  },\n  startObserving() {\n    assertSensorEventEnabledAsync(eventName);\n    window.addEventListener(eventName, this._handleMotion);\n  },\n  stopObserving() {\n    window.removeEventListener(eventName, this._handleMotion);\n  },\n};\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}