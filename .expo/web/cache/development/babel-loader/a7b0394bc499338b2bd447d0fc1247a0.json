{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\prana\\\\Desktop\\\\iits-app-main\\\\screens\\\\TabTwoScreen.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport * as WebBrowser from 'expo-web-browser';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport Card from \"../components/Card\";\nexport default function TabTwoScreen() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      scanned = _useState4[0],\n      setScanned = _useState4[1];\n\n  var itemsArray = [];\n\n  var _useState5 = useState(\"Cart: \"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      count = _useState6[0],\n      setCount = _useState6[1];\n\n  var _useState7 = useState(\"\"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      qrtext = _useState8[0],\n      setqrtext = _useState8[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$BarCodeScanner, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(BarCodeScanner.requestPermissionsAsync());\n\n            case 2:\n              _await$BarCodeScanner = _context.sent;\n              status = _await$BarCodeScanner.status;\n              setHasPermission(status === 'granted');\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var handleBarCodeScanned = function handleBarCodeScanned(_ref) {\n    var type = _ref.type,\n        data = _ref.data;\n    setScanned(true);\n    WebBrowser.openBrowserAsync(data);\n\n    if (validURL(data) == false) {\n      if (type == 'org.iso.Code39') {\n        itemsArray.push(data);\n\n        if (data == \"BANANA $2.00\") {\n          setCount(count + \" | Banana, $2.00 | \");\n        } else if (data == \"ORANGE $3.00\") {\n          setCount(count + \" | Orange, $3.00 | \");\n        } else if (data == \"LAYS CHIPS $2.00\") {\n          setCount(count + \" | Lays Chips, $2.00 | \");\n        } else {\n          setCount(count + \" | Invalid Item | \");\n        }\n      } else {\n        Alert.alert('Message', \"\" + data);\n      }\n    }\n  };\n\n  if (hasPermission === null) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 12\n      }\n    }, \"Requesting for camera permission\");\n  }\n\n  if (hasPermission === false) {\n    return React.createElement(Text, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 12\n      }\n    }, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 5\n    }\n  }, React.createElement(BarCodeScanner, {\n    onBarCodeScanned: scanned ? undefined : handleBarCodeScanned,\n    style: StyleSheet.absoluteFillObject,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), React.createElement(ScrollView, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }\n  }, React.createElement(Button, {\n    title: 'CLEAR CART',\n    onPress: function onPress() {\n      return setCount(\"Cart: \");\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }\n  }), React.createElement(Button, {\n    title: 'SHARE CART',\n    onPress: function onPress() {\n      return setqrtext(qrtext + count);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }), React.createElement(Card, {\n    pointerEvents: \"none\",\n    containerStyle: {\n      height: 200,\n      width: 400,\n      borderRadius: 16,\n      backgroundColor: 'white'\n    },\n    alignSelf: \"center\",\n    alignContent: \"center\",\n    textAlign: \"center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }\n  }, React.createElement(Text, {\n    style: {\n      fontSize: '20',\n      fontWeight: '200'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 6\n    }\n  }, \"\\n\", count)), scanned && React.createElement(Button, {\n    title: 'Tap to Scan Again',\n    onPress: function onPress() {\n      return setScanned(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 17\n    }\n  })), React.createElement(Image, {\n    style: {\n      width: 150,\n      height: 150\n    },\n    source: {\n      uri: \"https://chart.googleapis.com/chart?chl=\" + qrtext + \"&cht=qr&chs=300x300\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }\n  }));\n}\n\nfunction validURL(str) {\n  var pattern = new RegExp('^(https?:\\\\/\\\\/)?' + '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + '(\\\\#[-a-z\\\\d_]*)?$', 'i');\n  return !!pattern.test(str);\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff'\n  },\n  barCodeView: {\n    width: '100%',\n    height: '50%',\n    marginBottom: 40\n  },\n  navbar: {}\n});","map":{"version":3,"sources":["C:/Users/prana/Desktop/iits-app-main/screens/TabTwoScreen.tsx"],"names":["React","useState","useEffect","BarCodeScanner","WebBrowser","ScrollView","Card","TabTwoScreen","hasPermission","setHasPermission","scanned","setScanned","itemsArray","count","setCount","qrtext","setqrtext","requestPermissionsAsync","status","handleBarCodeScanned","type","data","openBrowserAsync","validURL","push","Alert","alert","styles","container","undefined","StyleSheet","absoluteFillObject","height","width","borderRadius","backgroundColor","fontSize","fontWeight","uri","str","pattern","RegExp","test","create","flex","barCodeView","marginBottom","navbar"],"mappings":"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","sourcesContent":["\nimport React, { useState, useEffect } from 'react';\nimport { Text, View, StyleSheet, Button, Alert, TextInput, Image, SafeAreaView } from 'react-native';\nimport { BarCodeScanner } from 'expo-barcode-scanner';\nimport { AntDesign } from \"@expo/vector-icons\";\n\nimport Navigation from '../navigation';\nimport * as WebBrowser from 'expo-web-browser';\nimport shouldUseActivityState from 'react-native-screens';\nimport { ScrollView, TouchableOpacity } from 'react-native-gesture-handler';\n// import { Card } from 'react-native-paper';\nimport Card from '../components/Card';\n\nexport default function TabTwoScreen() {\n  const [hasPermission, setHasPermission] = useState(null);\n  const [scanned, setScanned] = useState(false);\n  var itemsArray = [];\n  const [count, setCount] = useState(\"Cart: \");\n  const [qrtext, setqrtext] = useState(\"\")\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await BarCodeScanner.requestPermissionsAsync();\n      setHasPermission(status === 'granted');\n    })();\n  }, []);\n\n \n\n  const handleBarCodeScanned = ({ type, data }) => {\n    setScanned(true);\n    WebBrowser.openBrowserAsync(data);\n\n    \n    \n    if (validURL(data) == false) {\n      if (type == 'org.iso.Code39') {\n        \n        itemsArray.push(data)\n\n        if (data == \"BANANA $2.00\") {\n          setCount(count + \" | Banana, $2.00 | \")          \n        } else if (data == \"ORANGE $3.00\") {\n          setCount(count + \" | Orange, $3.00 | \")          \n        } else if (data == \"LAYS CHIPS $2.00\") {\n          setCount(count + \" | Lays Chips, $2.00 | \")          \n        } else {\n          setCount(count + \" | Invalid Item | \")\n        }\n        // Alert.alert('Item Name & Cost:', `${count}`\n      } else {\n        Alert.alert('Message',`${data}`);\n      }\n    }\n  };\n\n  if (hasPermission === null) {\n    return <Text>Requesting for camera permission</Text>;\n  }\n  if (hasPermission === false) {\n    return <Text>No access to camera</Text>;\n  }\n\n  \n\n  return (\n\n    <View style={styles.container}>\n      <BarCodeScanner\n        onBarCodeScanned={scanned ? undefined : handleBarCodeScanned}\n        style={StyleSheet.absoluteFillObject}\n      />\n\n    \n      {/* <Button title={'REFRESH CART'} onPress={() => } /> */}\n      <ScrollView>\n      <Button title={'CLEAR CART'} onPress={() => setCount(\"Cart: \")} />\n\n\n      \n\n    <Button title={'SHARE CART'} onPress={() => setqrtext(qrtext + count)} />\n      <Card pointerEvents='none' containerStyle={{height: 200, width: 400, borderRadius: 16, backgroundColor: 'white'}} alignSelf='center' alignContent='center' textAlign='center'>\n        \n     \n     <Text style={{fontSize: '20', fontWeight:'200'}}>{\"\\n\"}{count}</Text>\n    </Card>\n    {scanned && <Button title={'Tap to Scan Again'} onPress={() => setScanned(false)} />}\n\n     </ScrollView>\n    \n     \n      <Image style={{width:150, height:150}}  source={{uri:`https://chart.googleapis.com/chart?chl=${qrtext}&cht=qr&chs=300x300`}} />      \n      \n\n  \n    </View>\n\n);\n}\n\n\n\nfunction validURL(str) {\n  var pattern = new RegExp('^(https?:\\\\/\\\\/)?'+ // protocol\n    '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|'+ // domain name\n    '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))'+ // OR ip (v4) address\n    '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*'+ // port and path\n    '(\\\\?[;&a-z\\\\d%_.~+=-]*)?'+ // query string\n    '(\\\\#[-a-z\\\\d_]*)?$','i'); // fragment locator\n  return !!pattern.test(str);\n}\n\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  barCodeView: {\n    width: '100%', \n    height: '50%', \n    marginBottom: 40\n  },\n  navbar: {\n    \n  }\n\n});"]},"metadata":{},"sourceType":"module"}