{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\prana\\\\Desktop\\\\iits-app-main\\\\node_modules\\\\react-native-neu-element\\\\lib\\\\NeuButton.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from 'react';\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport NeuView from \"./NeuView\";\nimport PropTypes from 'prop-types';\n\nvar NeuButton = function NeuButton(props) {\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      toggleEffect = _useState2[0],\n      setToggleEffect = _useState2[1];\n\n  var children = props.children,\n      isConvex = props.isConvex,\n      active = props.active,\n      noPressEffect = props.noPressEffect,\n      onPressIn = props.onPressIn,\n      onPressOut = props.onPressOut,\n      onPress = props.onPress,\n      onLongPress = props.onLongPress,\n      accessibilityRole = props.accessibilityRole,\n      accessibilityStates = props.accessibilityStates,\n      accessibilityLabel = props.accessibilityLabel,\n      testID = props.testID;\n\n  var pressOut = function pressOut() {\n    if (noPressEffect) {\n      return;\n    }\n\n    if (active) {\n      return setToggleEffect(true);\n    }\n\n    if (onPressOut) {\n      onPressOut();\n    }\n\n    setToggleEffect(false);\n  };\n\n  var pressIn = function pressIn() {\n    if (noPressEffect) {\n      return;\n    }\n\n    if (active) {\n      return setToggleEffect(false);\n    }\n\n    if (onPressIn) {\n      onPressIn();\n    }\n\n    setToggleEffect(true);\n  };\n\n  if (isConvex) {\n    return React.createElement(TouchableWithoutFeedback, {\n      onPressOut: pressOut,\n      onPressIn: pressIn,\n      onPress: onPress,\n      onLongPress: onLongPress,\n      accessibilityRole: accessibilityRole,\n      accessibilityStates: accessibilityStates,\n      accessibilityLabel: accessibilityLabel,\n      testID: testID,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 7\n      }\n    }, React.createElement(View, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }\n    }, React.createElement(NeuView, _extends({}, props, {\n      concave: noPressEffect ? false : active ? true : toggleEffect,\n      convex: noPressEffect ? false : active ? false : !toggleEffect,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 11\n      }\n    }), children)));\n  }\n\n  return React.createElement(TouchableWithoutFeedback, {\n    onPressOut: pressOut,\n    onPressIn: pressIn,\n    onPress: onPress,\n    onLongPress: onLongPress,\n    accessibilityRole: accessibilityRole,\n    accessibilityStates: accessibilityStates,\n    accessibilityLabel: accessibilityLabel,\n    testID: testID,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }\n  }, React.createElement(NeuView, _extends({}, props, {\n    inset: noPressEffect ? false : active ? active : toggleEffect,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }\n  }), children)));\n};\n\nNeuButton.propTypes = _objectSpread({\n  isConvex: PropTypes.bool,\n  active: PropTypes.bool,\n  color: PropTypes.string.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  noPressEffect: PropTypes.bool,\n  onPress: PropTypes.func,\n  onPressIn: PropTypes.func,\n  onPressOut: PropTypes.func,\n  children: PropTypes.node\n}, NeuView.propTypes);\nexport default NeuButton;","map":{"version":3,"sources":["C:/Users/prana/Desktop/iits-app-main/node_modules/react-native-neu-element/lib/NeuButton.js"],"names":["React","useState","NeuView","PropTypes","NeuButton","props","toggleEffect","setToggleEffect","children","isConvex","active","noPressEffect","onPressIn","onPressOut","onPress","onLongPress","accessibilityRole","accessibilityStates","accessibilityLabel","testID","pressOut","pressIn","propTypes","bool","color","string","isRequired","width","number","height","func","node"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { TouchableWithoutFeedback, Text, View } from 'react-native';\nimport NeuView from './NeuView';\nimport PropTypes from 'prop-types';\n\nconst NeuButton = props => {\n  const [toggleEffect, setToggleEffect] = useState(false);\n  const {\n    children,\n    isConvex,\n    active,\n    noPressEffect,\n    onPressIn,\n    onPressOut,\n    onPress,\n    onLongPress,\n    accessibilityRole,\n    accessibilityStates,\n    accessibilityLabel,\n    testID\n  } = props;\n\n  const pressOut = () => {\n    if (noPressEffect) {\n      return;\n    }\n    if (active) {\n      return setToggleEffect(true);\n    }\n    if (onPressOut) {\n      onPressOut();\n    }\n    setToggleEffect(false);\n  };\n\n  const pressIn = () => {\n    if (noPressEffect) {\n      return;\n    }\n    if (active) {\n      return setToggleEffect(false);\n    }\n    if (onPressIn) {\n      onPressIn();\n    }\n    setToggleEffect(true);\n  };\n\n  if (isConvex) {\n    return (\n      <TouchableWithoutFeedback\n        onPressOut={pressOut}\n        onPressIn={pressIn}\n        onPress={onPress}\n        onLongPress={onLongPress}\n        accessibilityRole={accessibilityRole}\n        accessibilityStates={accessibilityStates}\n        accessibilityLabel={accessibilityLabel}\n        testID={testID}\n      >\n        <View>\n          <NeuView\n            {...props}\n            concave={noPressEffect ? false : active ? true : toggleEffect}\n            convex={noPressEffect ? false : active ? false : !toggleEffect}\n          >\n            {children}\n          </NeuView>\n        </View>\n      </TouchableWithoutFeedback>\n    );\n  }\n\n  return (\n    <TouchableWithoutFeedback\n      onPressOut={pressOut}\n      onPressIn={pressIn}\n      onPress={onPress}\n      onLongPress={onLongPress}\n      accessibilityRole={accessibilityRole}\n      accessibilityStates={accessibilityStates}\n      accessibilityLabel={accessibilityLabel}\n      testID={testID}\n    >\n      <View>\n        <NeuView\n          {...props}\n          inset={noPressEffect ? false : active ? active : toggleEffect}\n        >\n          {children}\n        </NeuView>\n      </View>\n    </TouchableWithoutFeedback>\n  );\n};\n\nNeuButton.propTypes = {\n  isConvex: PropTypes.bool,\n  active: PropTypes.bool,\n  color: PropTypes.string.isRequired,\n  width: PropTypes.number.isRequired,\n  height: PropTypes.number.isRequired,\n  noPressEffect: PropTypes.bool,\n  onPress: PropTypes.func,\n  onPressIn: PropTypes.func,\n  onPressOut: PropTypes.func,\n  children: PropTypes.node,\n  ...NeuView.propTypes\n};\n\nexport default NeuButton;\n"]},"metadata":{},"sourceType":"module"}