{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\prana\\\\Desktop\\\\iits-app-main\\\\node_modules\\\\react-native-neu-element\\\\lib\\\\NeuSpinner.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React from 'react';\nimport Animated, { Easing } from 'react-native-reanimated';\nimport { runInfinite } from \"./utils/animation/presets\";\nimport NeuView from \"./NeuView\";\nimport PropTypes from 'prop-types';\n\nvar NeuSpinner = function NeuSpinner(props) {\n  var Clock = Animated.Clock,\n      concat = Animated.concat;\n  var color = props.color,\n      _props$indicatorColor = props.indicatorColor,\n      indicatorColor = _props$indicatorColor === void 0 ? '#000' : _props$indicatorColor,\n      _props$duration = props.duration,\n      duration = _props$duration === void 0 ? 1000 : _props$duration,\n      _props$size = props.size,\n      size = _props$size === void 0 ? 50 : _props$size,\n      _props$easingType = props.easingType,\n      easingType = _props$easingType === void 0 ? Easing.linear : _props$easingType;\n  var rotation = runInfinite(new Clock(), 0, 360, duration, easingType);\n  var defaultSize = size < 50 ? 50 : size;\n  var innerSize = defaultSize - 15;\n  return React.createElement(NeuView, {\n    color: color,\n    width: defaultSize,\n    height: defaultSize,\n    borderRadius: 1000,\n    inset: true,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 5\n    }\n  }, React.createElement(NeuView, {\n    color: color,\n    width: innerSize,\n    height: innerSize,\n    borderRadius: 1000,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }\n  }, React.createElement(Animated.View, {\n    style: {\n      borderLeftColor: indicatorColor,\n      borderTopColor: indicatorColor,\n      borderBottomColor: indicatorColor,\n      borderWidth: 6,\n      borderRightColor: 'transparent',\n      transform: [{\n        rotate: concat(rotation, 'deg')\n      }],\n      borderRadius: 100,\n      width: defaultSize,\n      height: defaultSize\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }\n  })));\n};\n\nNeuSpinner.propTypes = _objectSpread({\n  color: PropTypes.string.isRequired,\n  indicatorColor: PropTypes.string.isRequired,\n  duration: PropTypes.number,\n  size: PropTypes.number.isRequired,\n  easingType: PropTypes.func\n}, NeuView.propTypes);\nexport default NeuSpinner;","map":{"version":3,"sources":["C:/Users/prana/Desktop/iits-app-main/node_modules/react-native-neu-element/lib/NeuSpinner.js"],"names":["React","Animated","Easing","runInfinite","NeuView","PropTypes","NeuSpinner","props","Clock","concat","color","indicatorColor","duration","size","easingType","linear","rotation","defaultSize","innerSize","borderLeftColor","borderTopColor","borderBottomColor","borderWidth","borderRightColor","transform","rotate","borderRadius","width","height","propTypes","string","isRequired","number","func"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,IAAmBC,MAAnB,QAAiC,yBAAjC;AACA,SAASC,WAAT;AACA,OAAOC,OAAP;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAAAC,KAAK,EAAI;AAAA,MAClBC,KADkB,GACAP,QADA,CAClBO,KADkB;AAAA,MACXC,MADW,GACAR,QADA,CACXQ,MADW;AAAA,MAIxBC,KAJwB,GAStBH,KATsB,CAIxBG,KAJwB;AAAA,8BAStBH,KATsB,CAKxBI,cALwB;AAAA,MAKxBA,cALwB,sCAKP,MALO;AAAA,wBAStBJ,KATsB,CAMxBK,QANwB;AAAA,MAMxBA,QANwB,gCAMb,IANa;AAAA,oBAStBL,KATsB,CAOxBM,IAPwB;AAAA,MAOxBA,IAPwB,4BAOjB,EAPiB;AAAA,0BAStBN,KATsB,CAQxBO,UARwB;AAAA,MAQxBA,UARwB,kCAQXZ,MAAM,CAACa,MARI;AAW1B,MAAMC,QAAQ,GAAGb,WAAW,CAAC,IAAIK,KAAJ,EAAD,EAAc,CAAd,EAAiB,GAAjB,EAAsBI,QAAtB,EAAgCE,UAAhC,CAA5B;AAEA,MAAMG,WAAW,GAAGJ,IAAI,GAAG,EAAP,GAAY,EAAZ,GAAiBA,IAArC;AACA,MAAMK,SAAS,GAAGD,WAAW,GAAG,EAAhC;AAEA,SACE,oBAAC,OAAD;AACE,IAAA,KAAK,EAAEP,KADT;AAEE,IAAA,KAAK,EAAEO,WAFT;AAGE,IAAA,MAAM,EAAEA,WAHV;AAIE,IAAA,YAAY,EAAE,IAJhB;AAKE,IAAA,KAAK,MALP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAOE,oBAAC,OAAD;AACE,IAAA,KAAK,EAAEP,KADT;AAEE,IAAA,KAAK,EAAEQ,SAFT;AAGE,IAAA,MAAM,EAAEA,SAHV;AAIE,IAAA,YAAY,EAAE,IAJhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAME,oBAAC,QAAD,CAAU,IAAV;AACE,IAAA,KAAK,EAAE;AACLC,MAAAA,eAAe,EAAER,cADZ;AAELS,MAAAA,cAAc,EAAET,cAFX;AAGLU,MAAAA,iBAAiB,EAAEV,cAHd;AAILW,MAAAA,WAAW,EAAE,CAJR;AAKLC,MAAAA,gBAAgB,EAAE,aALb;AAMLC,MAAAA,SAAS,EAAE,CAAC;AAAEC,QAAAA,MAAM,EAAEhB,MAAM,CAACO,QAAD,EAAW,KAAX;AAAhB,OAAD,CANN;AAOLU,MAAAA,YAAY,EAAE,GAPT;AAQLC,MAAAA,KAAK,EAAEV,WARF;AASLW,MAAAA,MAAM,EAAEX;AATH,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,CAPF,CADF;AA8BD,CA9CD;;AAgDAX,UAAU,CAACuB,SAAX;AACEnB,EAAAA,KAAK,EAAEL,SAAS,CAACyB,MAAV,CAAiBC,UAD1B;AAEEpB,EAAAA,cAAc,EAAEN,SAAS,CAACyB,MAAV,CAAiBC,UAFnC;AAGEnB,EAAAA,QAAQ,EAAEP,SAAS,CAAC2B,MAHtB;AAIEnB,EAAAA,IAAI,EAAER,SAAS,CAAC2B,MAAV,CAAiBD,UAJzB;AAKEjB,EAAAA,UAAU,EAAET,SAAS,CAAC4B;AALxB,GAMK7B,OAAO,CAACyB,SANb;AASA,eAAevB,UAAf","sourcesContent":["import React from 'react';\nimport Animated, { Easing } from 'react-native-reanimated';\nimport { runInfinite } from './utils/animation/presets';\nimport NeuView from './NeuView';\nimport PropTypes from 'prop-types';\n\nconst NeuSpinner = props => {\n  const { Clock, concat } = Animated;\n\n  const {\n    color,\n    indicatorColor = '#000',\n    duration = 1000,\n    size = 50,\n    easingType = Easing.linear\n  } = props;\n\n  const rotation = runInfinite(new Clock(), 0, 360, duration, easingType);\n\n  const defaultSize = size < 50 ? 50 : size;\n  const innerSize = defaultSize - 15;\n\n  return (\n    <NeuView\n      color={color}\n      width={defaultSize}\n      height={defaultSize}\n      borderRadius={1000}\n      inset\n    >\n      <NeuView\n        color={color}\n        width={innerSize}\n        height={innerSize}\n        borderRadius={1000}\n      >\n        <Animated.View\n          style={{\n            borderLeftColor: indicatorColor,\n            borderTopColor: indicatorColor,\n            borderBottomColor: indicatorColor,\n            borderWidth: 6,\n            borderRightColor: 'transparent',\n            transform: [{ rotate: concat(rotation, 'deg') }],\n            borderRadius: 100,\n            width: defaultSize,\n            height: defaultSize\n          }}\n        />\n      </NeuView>\n    </NeuView>\n  );\n};\n\nNeuSpinner.propTypes = {\n  color: PropTypes.string.isRequired,\n  indicatorColor: PropTypes.string.isRequired,\n  duration: PropTypes.number,\n  size: PropTypes.number.isRequired,\n  easingType: PropTypes.func,\n  ...NeuView.propTypes\n};\n\nexport default NeuSpinner;\n"]},"metadata":{},"sourceType":"module"}