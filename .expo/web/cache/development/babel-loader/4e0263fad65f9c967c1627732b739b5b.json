{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\prana\\\\Desktop\\\\iits-app-main\\\\screens\\\\Timer.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TimerHeader from \"./TimerHeader\";\nimport TimerDisplay from \"./TimerDisplay\";\nimport TimerButtons from \"./TimerButtons\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\n\nvar Timer = function (_React$Component) {\n  _inherits(Timer, _React$Component);\n\n  var _super = _createSuper(Timer);\n\n  function Timer(props) {\n    var _this;\n\n    _classCallCheck(this, Timer);\n\n    _this = _super.call(this, props);\n\n    _this.handlePlay = function () {\n      _this.setState({\n        running: true\n      });\n\n      _this.timerId = setInterval(function () {\n        _this.setState({\n          time: _this.state.time - 1\n        });\n      }, 1000);\n    };\n\n    _this.handlePause = function () {\n      clearInterval(_this.timerId);\n\n      _this.setState({\n        running: false\n      });\n    };\n\n    _this.handleReset = function () {\n      clearInterval(_this.timerId);\n\n      _this.setState({\n        running: false,\n        time: _this.props.period * 60\n      });\n    };\n\n    _this.state = {\n      running: false,\n      time: _this.props.period * 60\n    };\n    return _this;\n  }\n\n  _createClass(Timer, [{\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      this.setState({\n        running: false,\n        time: nextProps.period * 60\n      });\n\n      if (this.state.running === true && this.state.time == 0) {\n        this.handlePlay();\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: {\n          backgroundColor: 'transparent'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 4\n        }\n      }, React.createElement(TimerDisplay, {\n        time: this.state.time,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31,\n          columnNumber: 5\n        }\n      }), React.createElement(TimerHeader, {\n        running: this.state.running,\n        intervalType: this.props.intervalType,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 5\n        }\n      }), React.createElement(TimerButtons, {\n        play: this.handlePlay,\n        pause: this.handlePause,\n        reset: this.handleReset,\n        running: this.state.running,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 5\n        }\n      }));\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      if (this.state.running === true && this.state.time == 0) {\n        clearInterval(this.timerId);\n        Vibration.vibrate([500, 500, 500]);\n        this.props.Oncomplete();\n      } else if (this.state.running === false) {\n        clearInterval(this.timerId);\n      }\n    }\n  }]);\n\n  return Timer;\n}(React.Component);\n\nexport default Timer;\nvar styles = StyleSheet.create({\n  textStyle: {\n    color: \"#C2362B\",\n    fontSize: 25,\n    fontWeight: \"500\",\n    letterSpacing: 1.5,\n    marginTop: 5,\n    padding: 10,\n    backgroundColor: 'transparent'\n  }\n});","map":{"version":3,"sources":["C:/Users/prana/Desktop/iits-app-main/screens/Timer.tsx"],"names":["React","TimerHeader","TimerDisplay","TimerButtons","Timer","props","handlePlay","setState","running","timerId","setInterval","time","state","handlePause","clearInterval","handleReset","period","nextProps","backgroundColor","intervalType","Vibration","vibrate","Oncomplete","Component","styles","StyleSheet","create","textStyle","color","fontSize","fontWeight","letterSpacing","marginTop","padding"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { Platform, StyleSheet, Text, View, TextInput } from 'react-native';\r\nimport TimerHeader from './TimerHeader'\r\nimport TimerDisplay from './TimerDisplay'\r\nimport TimerButtons from './TimerButtons'\r\nimport {Vibration} from 'react-native'\r\n\r\nclass Timer extends React.Component {\r\n\r\n\tconstructor(props) {\r\n\t\tsuper(props)\r\n\t\tthis.state = {\r\n\t\t\trunning: false,\r\n\t\t\ttime: this.props.period * 60\r\n\t\t}\r\n\t}\r\n\r\n\t// gets called when a stream of new props arrive from parent component\r\n\tcomponentWillReceiveProps(nextProps) {\r\n    \tthis.setState({ running: false, time: nextProps.period * 60 });\r\n\t\tif(this.state.running === true && this.state.time == 0)\r\n\t\t{\r\n\t\t\tthis.handlePlay()\r\n\t\t}\r\n\t  }\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<View style={{backgroundColor: 'transparent'}}>\r\n\t\t\t\t\r\n\t\t\t\t<TimerDisplay\r\n\t\t\t\t\ttime={this.state.time}\r\n\t\t\t\t/>\r\n\t\t\t\t<TimerHeader\r\n\t\t\t\t\trunning={this.state.running}\r\n\t\t\t\t\tintervalType={this.props.intervalType}\r\n\t\t\t\t/>\r\n\t\t\t\t<TimerButtons\r\n\t\t\t\t\tplay={this.handlePlay}\r\n\t\t\t\t\tpause={this.handlePause}\r\n\t\t\t\t\treset={this.handleReset}\r\n\t\t\t\t\trunning={this.state.running}\r\n\t\t\t\t/>\r\n\t\t\t</View>\r\n\t\t)\r\n\t}\r\n\r\n\t// Invoked immediately after update occurs\r\n\tcomponentDidUpdate() {\r\n\t\tif(this.state.running === true && this.state.time == 0)\r\n\t\t{\r\n\t\t\tclearInterval(this.timerId)\r\n\t\t\tVibration.vibrate([500, 500, 500])\r\n\t\t\tthis.props.Oncomplete()\r\n\r\n\t\t}\r\n\t\telse if(this.state.running === false)\r\n\t\t{\r\n\t\t\tclearInterval(this.timerId)\r\n\t\t}\r\n\t}\r\n\r\n\t// gets triggered when Play button is pressed\r\n \thandlePlay = () => {\r\n\t\tthis.setState({\r\n\t\t\trunning: true\r\n\t\t})\r\n\t\tthis.timerId = setInterval(() =>{\r\n\t\t\tthis.setState({\r\n\t\t\t\ttime: this.state.time - 1\r\n\t\t\t})\r\n\t\t}, 1000)\r\n\t}\r\n\r\n\t//gets triggered when Pause button is pressed\r\n\thandlePause = () => {\r\n\t\tclearInterval(this.timerId)\r\n\t\tthis.setState({\r\n\t\t\trunning: false\r\n\t\t})\r\n\t}\r\n\r\n\t// gets triggered when Reset button is pressed\r\n\thandleReset = () => {\t\r\n\t\tclearInterval(this.timerId)\r\n\t\tthis.setState({\r\n\t\t\trunning: false,\r\n\t\t\ttime: this.props.period * 60\r\n\t\t})\r\n\t}\r\n}\r\n\r\nexport default Timer;\r\n\r\nconst styles = StyleSheet.create({\r\n  textStyle: {\r\n    color: \"#C2362B\",\r\n    fontSize: 25,\r\n    fontWeight: \"500\",\r\n    letterSpacing: 1.5,\r\n    marginTop: 5,\r\n    padding: 10,\r\n\tbackgroundColor: 'transparent'\r\n  }\r\n});"]},"metadata":{},"sourceType":"module"}