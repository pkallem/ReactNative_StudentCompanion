{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar _jsxFileName = \"C:\\\\Users\\\\prana\\\\Desktop\\\\iits-app-main\\\\node_modules\\\\react-native-elements\\\\src\\\\slider\\\\Slider.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport { ViewPropTypes, withTheme } from \"../config\";\nvar TRACK_SIZE = 4;\nvar THUMB_SIZE = 20;\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0\n  }\n};\n\nvar Rect = function () {\n  function Rect(x, y, width, height) {\n    _classCallCheck(this, Rect);\n\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  _createClass(Rect, [{\n    key: \"containsPoint\",\n    value: function containsPoint(x, y) {\n      return x >= this.x && y >= this.y && x <= this.x + this.width && y <= this.y + this.height;\n    }\n  }]);\n\n  return Rect;\n}();\n\nvar Slider = function (_Component) {\n  _inherits(Slider, _Component);\n\n  var _super = _createSuper(Slider);\n\n  function Slider(props) {\n    var _this;\n\n    _classCallCheck(this, Slider);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      containerSize: {\n        width: 0,\n        height: 0\n      },\n      trackSize: {\n        width: 0,\n        height: 0\n      },\n      thumbSize: {\n        width: 0,\n        height: 0\n      },\n      allMeasured: false,\n      value: new Animated.Value(props.value)\n    };\n    return _this;\n  }\n\n  _createClass(Slider, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.panResponder = PanResponder.create({\n        onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(this),\n        onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(this),\n        onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n        onPanResponderMove: this.handlePanResponderMove.bind(this),\n        onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n        onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(this),\n        onPanResponderTerminate: this.handlePanResponderEnd.bind(this)\n      });\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(nextProps) {\n      var newValue = nextProps.value;\n\n      if (this.props.value !== newValue) {\n        if (this.props.animateTransitions) {\n          this.setCurrentValueAnimated(newValue);\n        } else {\n          this.setCurrentValue(newValue);\n        }\n      }\n    }\n  }, {\n    key: \"setCurrentValue\",\n    value: function setCurrentValue(value) {\n      this.state.value.setValue(value);\n    }\n  }, {\n    key: \"setCurrentValueAnimated\",\n    value: function setCurrentValueAnimated(value) {\n      var animationType = this.props.animationType;\n\n      var animationConfig = _extends({}, DEFAULT_ANIMATION_CONFIGS[animationType], this.props.animationConfig, {\n        toValue: value\n      });\n\n      Animated[animationType](this.state.value, animationConfig).start();\n    }\n  }, {\n    key: \"handleMoveShouldSetPanResponder\",\n    value: function handleMoveShouldSetPanResponder() {\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderGrant\",\n    value: function handlePanResponderGrant() {\n      this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n      this.fireChangeEvent('onSlidingStart');\n    }\n  }, {\n    key: \"handlePanResponderMove\",\n    value: function handlePanResponderMove(_, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onValueChange');\n    }\n  }, {\n    key: \"handlePanResponderRequestEnd\",\n    value: function handlePanResponderRequestEnd() {\n      return false;\n    }\n  }, {\n    key: \"handlePanResponderEnd\",\n    value: function handlePanResponderEnd(_, gestureState) {\n      if (this.props.disabled) {\n        return;\n      }\n\n      this.setCurrentValue(this.getValue(gestureState));\n      this.fireChangeEvent('onSlidingComplete');\n    }\n  }, {\n    key: \"thumbHitTest\",\n    value: function thumbHitTest(e) {\n      var nativeEvent = e.nativeEvent;\n      var thumbTouchRect = this.getThumbTouchRect();\n      return thumbTouchRect.containsPoint(nativeEvent.locationX, nativeEvent.locationY);\n    }\n  }, {\n    key: \"handleStartShouldSetPanResponder\",\n    value: function handleStartShouldSetPanResponder(e) {\n      return this.thumbHitTest(e);\n    }\n  }, {\n    key: \"fireChangeEvent\",\n    value: function fireChangeEvent(event) {\n      if (this.props[event]) {\n        this.props[event](this.getCurrentValue());\n      }\n    }\n  }, {\n    key: \"getTouchOverflowSize\",\n    value: function getTouchOverflowSize() {\n      var state = this.state;\n      var props = this.props;\n      var size = {};\n\n      if (state.allMeasured === true) {\n        size.width = Math.max(0, props.thumbTouchSize.width - state.thumbSize.width);\n        size.height = Math.max(0, props.thumbTouchSize.height - state.containerSize.height);\n      }\n\n      return size;\n    }\n  }, {\n    key: \"getTouchOverflowStyle\",\n    value: function getTouchOverflowStyle() {\n      var _this$getTouchOverflo = this.getTouchOverflowSize(),\n          width = _this$getTouchOverflo.width,\n          height = _this$getTouchOverflo.height;\n\n      var touchOverflowStyle = {};\n\n      if (width !== undefined && height !== undefined) {\n        var verticalMargin = -height / 2;\n        touchOverflowStyle.marginTop = verticalMargin;\n        touchOverflowStyle.marginBottom = verticalMargin;\n        var horizontalMargin = -width / 2;\n        touchOverflowStyle.marginLeft = horizontalMargin;\n        touchOverflowStyle.marginRight = horizontalMargin;\n      }\n\n      if (this.props.debugTouchArea === true) {\n        touchOverflowStyle.backgroundColor = 'orange';\n        touchOverflowStyle.opacity = 0.5;\n      }\n\n      return touchOverflowStyle;\n    }\n  }, {\n    key: \"handleMeasure\",\n    value: function handleMeasure(name, x) {\n      var _x$nativeEvent$layout = x.nativeEvent.layout,\n          width = _x$nativeEvent$layout.width,\n          height = _x$nativeEvent$layout.height;\n      var size = {\n        width: width,\n        height: height\n      };\n      var storeName = \"_\" + name;\n      var currentSize = this[storeName];\n\n      if (currentSize && width === currentSize.width && height === currentSize.height) {\n        return;\n      }\n\n      this[storeName] = size;\n\n      if (this._containerSize && this._trackSize && this._thumbSize) {\n        this.setState({\n          containerSize: this._containerSize,\n          trackSize: this._trackSize,\n          thumbSize: this._thumbSize,\n          allMeasured: true\n        });\n      }\n    }\n  }, {\n    key: \"measureContainer\",\n    value: function measureContainer(x) {\n      this.handleMeasure('containerSize', x);\n    }\n  }, {\n    key: \"measureTrack\",\n    value: function measureTrack(x) {\n      this.handleMeasure('trackSize', x);\n    }\n  }, {\n    key: \"measureThumb\",\n    value: function measureThumb(x) {\n      this.handleMeasure('thumbSize', x);\n    }\n  }, {\n    key: \"getValue\",\n    value: function getValue(gestureState) {\n      var length = this.state.containerSize.width - this.state.thumbSize.width;\n      var thumbLeft = this._previousLeft + (this.props.orientation === 'vertical' ? gestureState.dy : gestureState.dx);\n      var ratio = thumbLeft / length;\n\n      if (this.props.step) {\n        return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, this.props.minimumValue + Math.round(ratio * (this.props.maximumValue - this.props.minimumValue) / this.props.step) * this.props.step));\n      } else {\n        return Math.max(this.props.minimumValue, Math.min(this.props.maximumValue, ratio * (this.props.maximumValue - this.props.minimumValue) + this.props.minimumValue));\n      }\n    }\n  }, {\n    key: \"getCurrentValue\",\n    value: function getCurrentValue() {\n      return this.state.value.__getValue();\n    }\n  }, {\n    key: \"getRatio\",\n    value: function getRatio(value) {\n      return (value - this.props.minimumValue) / (this.props.maximumValue - this.props.minimumValue);\n    }\n  }, {\n    key: \"getThumbLeft\",\n    value: function getThumbLeft(value) {\n      var ratio = this.getRatio(value);\n      return ratio * (this.state.containerSize.width - this.state.thumbSize.width);\n    }\n  }, {\n    key: \"getThumbTouchRect\",\n    value: function getThumbTouchRect() {\n      var state = this.state;\n      var props = this.props;\n      var touchOverflowSize = this.getTouchOverflowSize();\n      return new Rect(touchOverflowSize.width / 2 + this.getThumbLeft(this.getCurrentValue()) + (state.thumbSize.width - props.thumbTouchSize.width) / 2, touchOverflowSize.height / 2 + (state.containerSize.height - props.thumbTouchSize.height) / 2, props.thumbTouchSize.width, props.thumbTouchSize.height);\n    }\n  }, {\n    key: \"renderDebugThumbTouchRect\",\n    value: function renderDebugThumbTouchRect(thumbLeft) {\n      var thumbTouchRect = this.getThumbTouchRect();\n      var positionStyle = {\n        left: thumbLeft,\n        top: thumbTouchRect.y,\n        width: thumbTouchRect.width,\n        height: thumbTouchRect.height\n      };\n      return React.createElement(Animated.View, {\n        style: positionStyle,\n        pointerEvents: \"none\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 12\n        }\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          minimumValue = _this$props.minimumValue,\n          maximumValue = _this$props.maximumValue,\n          minimumTrackTintColor = _this$props.minimumTrackTintColor,\n          maximumTrackTintColor = _this$props.maximumTrackTintColor,\n          thumbTintColor = _this$props.thumbTintColor,\n          containerStyle = _this$props.containerStyle,\n          style = _this$props.style,\n          trackStyle = _this$props.trackStyle,\n          thumbStyle = _this$props.thumbStyle,\n          debugTouchArea = _this$props.debugTouchArea,\n          orientation = _this$props.orientation,\n          other = _objectWithoutProperties(_this$props, [\"minimumValue\", \"maximumValue\", \"minimumTrackTintColor\", \"maximumTrackTintColor\", \"thumbTintColor\", \"containerStyle\", \"style\", \"trackStyle\", \"thumbStyle\", \"debugTouchArea\", \"orientation\"]);\n\n      var _this$state = this.state,\n          value = _this$state.value,\n          containerSize = _this$state.containerSize,\n          trackSize = _this$state.trackSize,\n          thumbSize = _this$state.thumbSize,\n          allMeasured = _this$state.allMeasured;\n      var mainStyles = containerStyle || styles;\n      var thumbLeft = value.interpolate({\n        inputRange: [minimumValue, maximumValue],\n        outputRange: [0, containerSize.width - thumbSize.width]\n      });\n      var valueVisibleStyle = {};\n\n      if (!allMeasured) {\n        valueVisibleStyle.opacity = 0;\n      }\n\n      var minimumTrackStyle = _objectSpread({\n        position: 'absolute',\n        width: Animated.add(thumbLeft, thumbSize.width / 2),\n        marginTop: -trackSize.height,\n        backgroundColor: minimumTrackTintColor\n      }, valueVisibleStyle);\n\n      var thumbStyleTransform = thumbStyle && thumbStyle.transform || [];\n      var touchOverflowStyle = this.getTouchOverflowStyle();\n      return React.createElement(View, _extends({}, other, {\n        style: StyleSheet.flatten([mainStyles.container, orientation === 'vertical' && {\n          transform: [{\n            rotate: '90deg'\n          }]\n        }, style]),\n        onLayout: this.measureContainer.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 7\n        }\n      }), React.createElement(View, {\n        style: StyleSheet.flatten([{\n          backgroundColor: maximumTrackTintColor\n        }, mainStyles.track, trackStyle]),\n        onLayout: this.measureTrack.bind(this),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 9\n        }\n      }), React.createElement(Animated.View, {\n        style: StyleSheet.flatten([mainStyles.track, trackStyle, minimumTrackStyle]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 9\n        }\n      }), React.createElement(Animated.View, {\n        testID: \"sliderThumb\",\n        onLayout: this.measureThumb.bind(this),\n        style: StyleSheet.flatten([{\n          backgroundColor: thumbTintColor\n        }, mainStyles.thumb, thumbStyle, _objectSpread({\n          transform: [{\n            translateX: thumbLeft\n          }, {\n            translateY: -(trackSize.height + thumbSize.height) / 2\n          }].concat(_toConsumableArray(thumbStyleTransform))\n        }, valueVisibleStyle)]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 382,\n          columnNumber: 9\n        }\n      }), React.createElement(View, _extends({\n        style: StyleSheet.flatten([styles.touchArea, touchOverflowStyle])\n      }, this.panResponder.panHandlers, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 9\n        }\n      }), debugTouchArea === true && this.renderDebugThumbTouchRect(thumbLeft)));\n    }\n  }]);\n\n  return Slider;\n}(Component);\n\nSlider.propTypes = {\n  value: PropTypes.number,\n  disabled: PropTypes.bool,\n  minimumValue: PropTypes.number,\n  maximumValue: PropTypes.number,\n  step: PropTypes.number,\n  minimumTrackTintColor: PropTypes.string,\n  maximumTrackTintColor: PropTypes.string,\n  thumbTintColor: PropTypes.string,\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number\n  }),\n  onValueChange: PropTypes.func,\n  onSlidingStart: PropTypes.func,\n  onSlidingComplete: PropTypes.func,\n  style: ViewPropTypes.style,\n  trackStyle: ViewPropTypes.style,\n  thumbStyle: ViewPropTypes.style,\n  debugTouchArea: PropTypes.bool,\n  animateTransitions: PropTypes.bool,\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n  animationConfig: PropTypes.object,\n  containerStyle: ViewPropTypes.style\n};\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: 'red',\n  thumbTouchSize: {\n    width: 40,\n    height: 40\n  },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal'\n};\nvar styles = StyleSheet.create({\n  container: {\n    height: 40,\n    justifyContent: 'center'\n  },\n  track: {\n    height: TRACK_SIZE,\n    borderRadius: TRACK_SIZE / 2\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n    top: 22\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5\n  }\n});\nexport { Slider };\nexport default withTheme(Slider, 'Slider');","map":{"version":3,"sources":["C:/Users/prana/Desktop/iits-app-main/node_modules/react-native-elements/src/slider/Slider.js"],"names":["React","Component","PropTypes","ViewPropTypes","withTheme","TRACK_SIZE","THUMB_SIZE","DEFAULT_ANIMATION_CONFIGS","spring","friction","tension","timing","duration","easing","Easing","inOut","ease","delay","Rect","x","y","width","height","Slider","props","state","containerSize","trackSize","thumbSize","allMeasured","value","Animated","Value","panResponder","PanResponder","create","onStartShouldSetPanResponder","handleStartShouldSetPanResponder","bind","onMoveShouldSetPanResponder","handleMoveShouldSetPanResponder","onPanResponderGrant","handlePanResponderGrant","onPanResponderMove","handlePanResponderMove","onPanResponderRelease","handlePanResponderEnd","onPanResponderTerminationRequest","handlePanResponderRequestEnd","onPanResponderTerminate","nextProps","newValue","animateTransitions","setCurrentValueAnimated","setCurrentValue","setValue","animationType","animationConfig","toValue","start","_previousLeft","getThumbLeft","getCurrentValue","fireChangeEvent","_","gestureState","disabled","getValue","e","nativeEvent","thumbTouchRect","getThumbTouchRect","containsPoint","locationX","locationY","thumbHitTest","event","size","Math","max","thumbTouchSize","getTouchOverflowSize","touchOverflowStyle","undefined","verticalMargin","marginTop","marginBottom","horizontalMargin","marginLeft","marginRight","debugTouchArea","backgroundColor","opacity","name","layout","storeName","currentSize","_containerSize","_trackSize","_thumbSize","setState","handleMeasure","length","thumbLeft","orientation","dy","dx","ratio","step","minimumValue","min","maximumValue","round","__getValue","getRatio","touchOverflowSize","positionStyle","left","top","minimumTrackTintColor","maximumTrackTintColor","thumbTintColor","containerStyle","style","trackStyle","thumbStyle","other","mainStyles","styles","interpolate","inputRange","outputRange","valueVisibleStyle","minimumTrackStyle","position","add","thumbStyleTransform","transform","getTouchOverflowStyle","StyleSheet","flatten","container","rotate","measureContainer","track","measureTrack","measureThumb","thumb","translateX","translateY","touchArea","panHandlers","renderDebugThumbTouchRect","propTypes","number","bool","string","shape","onValueChange","func","onSlidingStart","onSlidingComplete","oneOf","object","defaultProps","justifyContent","borderRadius","right","bottom","debugThumbTouchArea"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;;;;;;AAGA,SAASC,aAAT,EAAwBC,SAAxB;AAEA,IAAMC,UAAU,GAAG,CAAnB;AACA,IAAMC,UAAU,GAAG,EAAnB;AAEA,IAAIC,yBAAyB,GAAG;AAC9BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE,CADJ;AAENC,IAAAA,OAAO,EAAE;AAFH,GADsB;AAK9BC,EAAAA,MAAM,EAAE;AACNC,IAAAA,QAAQ,EAAE,GADJ;AAENC,IAAAA,MAAM,EAAEC,MAAM,CAACC,KAAP,CAAaD,MAAM,CAACE,IAApB,CAFF;AAGNC,IAAAA,KAAK,EAAE;AAHD;AALsB,CAAhC;;IAYMC,I;AACJ,gBAAYC,CAAZ,EAAeC,CAAf,EAAkBC,KAAlB,EAAyBC,MAAzB,EAAiC;AAAA;;AAC/B,SAAKH,CAAL,GAASA,CAAT;AACA,SAAKC,CAAL,GAASA,CAAT;AACA,SAAKC,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAcA,MAAd;AACD;;;;WACD,uBAAcH,CAAd,EAAiBC,CAAjB,EAAoB;AAClB,aACED,CAAC,IAAI,KAAKA,CAAV,IACAC,CAAC,IAAI,KAAKA,CADV,IAEAD,CAAC,IAAI,KAAKA,CAAL,GAAS,KAAKE,KAFnB,IAGAD,CAAC,IAAI,KAAKA,CAAL,GAAS,KAAKE,MAJrB;AAMD;;;;;;IAGGC,M;;;;;AACJ,kBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,aAAa,EAAE;AAAEL,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE;AAApB,OADJ;AAEXK,MAAAA,SAAS,EAAE;AAAEN,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE;AAApB,OAFA;AAGXM,MAAAA,SAAS,EAAE;AAAEP,QAAAA,KAAK,EAAE,CAAT;AAAYC,QAAAA,MAAM,EAAE;AAApB,OAHA;AAIXO,MAAAA,WAAW,EAAE,KAJF;AAKXC,MAAAA,KAAK,EAAE,IAAIC,QAAQ,CAACC,KAAb,CAAmBR,KAAK,CAACM,KAAzB;AALI,KAAb;AAFiB;AASlB;;;;WAED,8BAAqB;AACnB,WAAKG,YAAL,GAAoBC,YAAY,CAACC,MAAb,CAAoB;AACtCC,QAAAA,4BAA4B,EAAE,KAAKC,gCAAL,CAAsCC,IAAtC,CAC5B,IAD4B,CADQ;AAItCC,QAAAA,2BAA2B,EAAE,KAAKC,+BAAL,CAAqCF,IAArC,CAC3B,IAD2B,CAJS;AAOtCG,QAAAA,mBAAmB,EAAE,KAAKC,uBAAL,CAA6BJ,IAA7B,CAAkC,IAAlC,CAPiB;AAQtCK,QAAAA,kBAAkB,EAAE,KAAKC,sBAAL,CAA4BN,IAA5B,CAAiC,IAAjC,CARkB;AAStCO,QAAAA,qBAAqB,EAAE,KAAKC,qBAAL,CAA2BR,IAA3B,CAAgC,IAAhC,CATe;AAUtCS,QAAAA,gCAAgC,EAAE,KAAKC,4BAAL,CAAkCV,IAAlC,CAChC,IADgC,CAVI;AAatCW,QAAAA,uBAAuB,EAAE,KAAKH,qBAAL,CAA2BR,IAA3B,CAAgC,IAAhC;AAba,OAApB,CAApB;AAeD;;;WAED,mCAA0BY,SAA1B,EAAqC;AACnC,UAAIC,QAAQ,GAAGD,SAAS,CAACpB,KAAzB;;AAEA,UAAI,KAAKN,KAAL,CAAWM,KAAX,KAAqBqB,QAAzB,EAAmC;AACjC,YAAI,KAAK3B,KAAL,CAAW4B,kBAAf,EAAmC;AACjC,eAAKC,uBAAL,CAA6BF,QAA7B;AACD,SAFD,MAEO;AACL,eAAKG,eAAL,CAAqBH,QAArB;AACD;AACF;AACF;;;WAED,yBAAgBrB,KAAhB,EAAuB;AACrB,WAAKL,KAAL,CAAWK,KAAX,CAAiByB,QAAjB,CAA0BzB,KAA1B;AACD;;;WAED,iCAAwBA,KAAxB,EAA+B;AAC7B,UAAI0B,aAAa,GAAG,KAAKhC,KAAL,CAAWgC,aAA/B;;AACA,UAAIC,eAAe,GAAG,SACpB,EADoB,EAEpBlD,yBAAyB,CAACiD,aAAD,CAFL,EAGpB,KAAKhC,KAAL,CAAWiC,eAHS,EAIpB;AACEC,QAAAA,OAAO,EAAE5B;AADX,OAJoB,CAAtB;;AASAC,MAAAA,QAAQ,CAACyB,aAAD,CAAR,CAAwB,KAAK/B,KAAL,CAAWK,KAAnC,EAA0C2B,eAA1C,EAA2DE,KAA3D;AACD;;;WAED,2CAAqE;AAEnE,aAAO,KAAP;AACD;;;WAED,mCAA6D;AAC3D,WAAKC,aAAL,GAAqB,KAAKC,YAAL,CAAkB,KAAKC,eAAL,EAAlB,CAArB;AACA,WAAKC,eAAL,CAAqB,gBAArB;AACD;;;WAED,gCAAuBC,CAAvB,EAA0BC,YAA1B,EAAwC;AACtC,UAAI,KAAKzC,KAAL,CAAW0C,QAAf,EAAyB;AACvB;AACD;;AAED,WAAKZ,eAAL,CAAqB,KAAKa,QAAL,CAAcF,YAAd,CAArB;AACA,WAAKF,eAAL,CAAqB,eAArB;AACD;;;WAED,wCAA+B;AAE7B,aAAO,KAAP;AACD;;;WAED,+BAAsBC,CAAtB,EAAyBC,YAAzB,EAAuC;AACrC,UAAI,KAAKzC,KAAL,CAAW0C,QAAf,EAAyB;AACvB;AACD;;AAED,WAAKZ,eAAL,CAAqB,KAAKa,QAAL,CAAcF,YAAd,CAArB;AACA,WAAKF,eAAL,CAAqB,mBAArB;AACD;;;WAED,sBAAaK,CAAb,EAAgB;AACd,UAAIC,WAAW,GAAGD,CAAC,CAACC,WAApB;AACA,UAAIC,cAAc,GAAG,KAAKC,iBAAL,EAArB;AACA,aAAOD,cAAc,CAACE,aAAf,CACLH,WAAW,CAACI,SADP,EAELJ,WAAW,CAACK,SAFP,CAAP;AAID;;;WAED,0CAAiCN,CAAjC,EAA6D;AAE3D,aAAO,KAAKO,YAAL,CAAkBP,CAAlB,CAAP;AACD;;;WAED,yBAAgBQ,KAAhB,EAAuB;AACrB,UAAI,KAAKpD,KAAL,CAAWoD,KAAX,CAAJ,EAAuB;AACrB,aAAKpD,KAAL,CAAWoD,KAAX,EAAkB,KAAKd,eAAL,EAAlB;AACD;AACF;;;WAED,gCAAuB;AACrB,UAAIrC,KAAK,GAAG,KAAKA,KAAjB;AACA,UAAID,KAAK,GAAG,KAAKA,KAAjB;AAEA,UAAIqD,IAAI,GAAG,EAAX;;AACA,UAAIpD,KAAK,CAACI,WAAN,KAAsB,IAA1B,EAAgC;AAC9BgD,QAAAA,IAAI,CAACxD,KAAL,GAAayD,IAAI,CAACC,GAAL,CACX,CADW,EAEXvD,KAAK,CAACwD,cAAN,CAAqB3D,KAArB,GAA6BI,KAAK,CAACG,SAAN,CAAgBP,KAFlC,CAAb;AAIAwD,QAAAA,IAAI,CAACvD,MAAL,GAAcwD,IAAI,CAACC,GAAL,CACZ,CADY,EAEZvD,KAAK,CAACwD,cAAN,CAAqB1D,MAArB,GAA8BG,KAAK,CAACC,aAAN,CAAoBJ,MAFtC,CAAd;AAID;;AAED,aAAOuD,IAAP;AACD;;;WAED,iCAAwB;AAAA,kCACE,KAAKI,oBAAL,EADF;AAAA,UAChB5D,KADgB,yBAChBA,KADgB;AAAA,UACTC,MADS,yBACTA,MADS;;AAGtB,UAAI4D,kBAAkB,GAAG,EAAzB;;AACA,UAAI7D,KAAK,KAAK8D,SAAV,IAAuB7D,MAAM,KAAK6D,SAAtC,EAAiD;AAC/C,YAAIC,cAAc,GAAG,CAAC9D,MAAD,GAAU,CAA/B;AACA4D,QAAAA,kBAAkB,CAACG,SAAnB,GAA+BD,cAA/B;AACAF,QAAAA,kBAAkB,CAACI,YAAnB,GAAkCF,cAAlC;AAEA,YAAIG,gBAAgB,GAAG,CAAClE,KAAD,GAAS,CAAhC;AACA6D,QAAAA,kBAAkB,CAACM,UAAnB,GAAgCD,gBAAhC;AACAL,QAAAA,kBAAkB,CAACO,WAAnB,GAAiCF,gBAAjC;AACD;;AAED,UAAI,KAAK/D,KAAL,CAAWkE,cAAX,KAA8B,IAAlC,EAAwC;AACtCR,QAAAA,kBAAkB,CAACS,eAAnB,GAAqC,QAArC;AACAT,QAAAA,kBAAkB,CAACU,OAAnB,GAA6B,GAA7B;AACD;;AAED,aAAOV,kBAAP;AACD;;;WAED,uBAAcW,IAAd,EAAoB1E,CAApB,EAAuB;AAAA,kCACGA,CAAC,CAACkD,WAAF,CAAcyB,MADjB;AAAA,UACfzE,KADe,yBACfA,KADe;AAAA,UACRC,MADQ,yBACRA,MADQ;AAErB,UAAIuD,IAAI,GAAG;AAAExD,QAAAA,KAAK,EAAEA,KAAT;AAAgBC,QAAAA,MAAM,EAAEA;AAAxB,OAAX;AAEA,UAAIyE,SAAS,SAAOF,IAApB;AACA,UAAIG,WAAW,GAAG,KAAKD,SAAL,CAAlB;;AACA,UACEC,WAAW,IACX3E,KAAK,KAAK2E,WAAW,CAAC3E,KADtB,IAEAC,MAAM,KAAK0E,WAAW,CAAC1E,MAHzB,EAIE;AACA;AACD;;AACD,WAAKyE,SAAL,IAAkBlB,IAAlB;;AAEA,UAAI,KAAKoB,cAAL,IAAuB,KAAKC,UAA5B,IAA0C,KAAKC,UAAnD,EAA+D;AAC7D,aAAKC,QAAL,CAAc;AACZ1E,UAAAA,aAAa,EAAE,KAAKuE,cADR;AAEZtE,UAAAA,SAAS,EAAE,KAAKuE,UAFJ;AAGZtE,UAAAA,SAAS,EAAE,KAAKuE,UAHJ;AAIZtE,UAAAA,WAAW,EAAE;AAJD,SAAd;AAMD;AACF;;;WAED,0BAAiBV,CAAjB,EAAoB;AAClB,WAAKkF,aAAL,CAAmB,eAAnB,EAAoClF,CAApC;AACD;;;WAED,sBAAaA,CAAb,EAAgB;AACd,WAAKkF,aAAL,CAAmB,WAAnB,EAAgClF,CAAhC;AACD;;;WAED,sBAAaA,CAAb,EAAgB;AACd,WAAKkF,aAAL,CAAmB,WAAnB,EAAgClF,CAAhC;AACD;;;WAED,kBAAS8C,YAAT,EAAuB;AACrB,UAAIqC,MAAM,GAAG,KAAK7E,KAAL,CAAWC,aAAX,CAAyBL,KAAzB,GAAiC,KAAKI,KAAL,CAAWG,SAAX,CAAqBP,KAAnE;AACA,UAAIkF,SAAS,GACX,KAAK3C,aAAL,IACC,KAAKpC,KAAL,CAAWgF,WAAX,KAA2B,UAA3B,GACGvC,YAAY,CAACwC,EADhB,GAEGxC,YAAY,CAACyC,EAHjB,CADF;AAMA,UAAIC,KAAK,GAAGJ,SAAS,GAAGD,MAAxB;;AAEA,UAAI,KAAK9E,KAAL,CAAWoF,IAAf,EAAqB;AACnB,eAAO9B,IAAI,CAACC,GAAL,CACL,KAAKvD,KAAL,CAAWqF,YADN,EAEL/B,IAAI,CAACgC,GAAL,CACE,KAAKtF,KAAL,CAAWuF,YADb,EAEE,KAAKvF,KAAL,CAAWqF,YAAX,GACE/B,IAAI,CAACkC,KAAL,CACEL,KAAK,IACF,KAAKnF,KAAL,CAAWuF,YAAX,GAA0B,KAAKvF,KAAL,CAAWqF,YADnC,CAAL,GAEE,KAAKrF,KAAL,CAAWoF,IAHf,IAKE,KAAKpF,KAAL,CAAWoF,IARjB,CAFK,CAAP;AAaD,OAdD,MAcO;AACL,eAAO9B,IAAI,CAACC,GAAL,CACL,KAAKvD,KAAL,CAAWqF,YADN,EAEL/B,IAAI,CAACgC,GAAL,CACE,KAAKtF,KAAL,CAAWuF,YADb,EAEEJ,KAAK,IAAI,KAAKnF,KAAL,CAAWuF,YAAX,GAA0B,KAAKvF,KAAL,CAAWqF,YAAzC,CAAL,GACE,KAAKrF,KAAL,CAAWqF,YAHf,CAFK,CAAP;AAQD;AACF;;;WAED,2BAAkB;AAChB,aAAO,KAAKpF,KAAL,CAAWK,KAAX,CAAiBmF,UAAjB,EAAP;AACD;;;WAED,kBAASnF,KAAT,EAAgB;AACd,aACE,CAACA,KAAK,GAAG,KAAKN,KAAL,CAAWqF,YAApB,KACC,KAAKrF,KAAL,CAAWuF,YAAX,GAA0B,KAAKvF,KAAL,CAAWqF,YADtC,CADF;AAID;;;WAED,sBAAa/E,KAAb,EAAoB;AAClB,UAAI6E,KAAK,GAAG,KAAKO,QAAL,CAAcpF,KAAd,CAAZ;AACA,aACE6E,KAAK,IAAI,KAAKlF,KAAL,CAAWC,aAAX,CAAyBL,KAAzB,GAAiC,KAAKI,KAAL,CAAWG,SAAX,CAAqBP,KAA1D,CADP;AAGD;;;WAED,6BAAoB;AAClB,UAAII,KAAK,GAAG,KAAKA,KAAjB;AACA,UAAID,KAAK,GAAG,KAAKA,KAAjB;AACA,UAAI2F,iBAAiB,GAAG,KAAKlC,oBAAL,EAAxB;AAEA,aAAO,IAAI/D,IAAJ,CACLiG,iBAAiB,CAAC9F,KAAlB,GAA0B,CAA1B,GACE,KAAKwC,YAAL,CAAkB,KAAKC,eAAL,EAAlB,CADF,GAEE,CAACrC,KAAK,CAACG,SAAN,CAAgBP,KAAhB,GAAwBG,KAAK,CAACwD,cAAN,CAAqB3D,KAA9C,IAAuD,CAHpD,EAIL8F,iBAAiB,CAAC7F,MAAlB,GAA2B,CAA3B,GACE,CAACG,KAAK,CAACC,aAAN,CAAoBJ,MAApB,GAA6BE,KAAK,CAACwD,cAAN,CAAqB1D,MAAnD,IAA6D,CAL1D,EAMLE,KAAK,CAACwD,cAAN,CAAqB3D,KANhB,EAOLG,KAAK,CAACwD,cAAN,CAAqB1D,MAPhB,CAAP;AASD;;;WAED,mCAA0BiF,SAA1B,EAAqC;AACnC,UAAIjC,cAAc,GAAG,KAAKC,iBAAL,EAArB;AACA,UAAI6C,aAAa,GAAG;AAClBC,QAAAA,IAAI,EAAEd,SADY;AAElBe,QAAAA,GAAG,EAAEhD,cAAc,CAAClD,CAFF;AAGlBC,QAAAA,KAAK,EAAEiD,cAAc,CAACjD,KAHJ;AAIlBC,QAAAA,MAAM,EAAEgD,cAAc,CAAChD;AAJL,OAApB;AAMA,aAAO,oBAAC,QAAD,CAAU,IAAV;AAAe,QAAA,KAAK,EAAE8F,aAAtB;AAAqC,QAAA,aAAa,EAAC,MAAnD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;;;WAED,kBAAS;AAAA,wBAcH,KAAK5F,KAdF;AAAA,UAELqF,YAFK,eAELA,YAFK;AAAA,UAGLE,YAHK,eAGLA,YAHK;AAAA,UAILQ,qBAJK,eAILA,qBAJK;AAAA,UAKLC,qBALK,eAKLA,qBALK;AAAA,UAMLC,cANK,eAMLA,cANK;AAAA,UAOLC,cAPK,eAOLA,cAPK;AAAA,UAQLC,KARK,eAQLA,KARK;AAAA,UASLC,UATK,eASLA,UATK;AAAA,UAULC,UAVK,eAULA,UAVK;AAAA,UAWLnC,cAXK,eAWLA,cAXK;AAAA,UAYLc,WAZK,eAYLA,WAZK;AAAA,UAaFsB,KAbE;;AAAA,wBAsBH,KAAKrG,KAtBF;AAAA,UAiBLK,KAjBK,eAiBLA,KAjBK;AAAA,UAkBLJ,aAlBK,eAkBLA,aAlBK;AAAA,UAmBLC,SAnBK,eAmBLA,SAnBK;AAAA,UAoBLC,SApBK,eAoBLA,SApBK;AAAA,UAqBLC,WArBK,eAqBLA,WArBK;AAwBP,UAAIkG,UAAU,GAAGL,cAAc,IAAIM,MAAnC;AACA,UAAIzB,SAAS,GAAGzE,KAAK,CAACmG,WAAN,CAAkB;AAChCC,QAAAA,UAAU,EAAE,CAACrB,YAAD,EAAeE,YAAf,CADoB;AAEhCoB,QAAAA,WAAW,EAAE,CAAC,CAAD,EAAIzG,aAAa,CAACL,KAAd,GAAsBO,SAAS,CAACP,KAApC;AAFmB,OAAlB,CAAhB;AAMA,UAAI+G,iBAAiB,GAAG,EAAxB;;AACA,UAAI,CAACvG,WAAL,EAAkB;AAChBuG,QAAAA,iBAAiB,CAACxC,OAAlB,GAA4B,CAA5B;AACD;;AAED,UAAIyC,iBAAiB;AACnBC,QAAAA,QAAQ,EAAE,UADS;AAEnBjH,QAAAA,KAAK,EAAEU,QAAQ,CAACwG,GAAT,CAAahC,SAAb,EAAwB3E,SAAS,CAACP,KAAV,GAAkB,CAA1C,CAFY;AAGnBgE,QAAAA,SAAS,EAAE,CAAC1D,SAAS,CAACL,MAHH;AAInBqE,QAAAA,eAAe,EAAE4B;AAJE,SAKhBa,iBALgB,CAArB;;AAQA,UAAMI,mBAAmB,GAAIX,UAAU,IAAIA,UAAU,CAACY,SAA1B,IAAwC,EAApE;AACA,UAAIvD,kBAAkB,GAAG,KAAKwD,qBAAL,EAAzB;AACA,aACE,oBAAC,IAAD,eACMZ,KADN;AAEE,QAAA,KAAK,EAAEa,UAAU,CAACC,OAAX,CAAmB,CACxBb,UAAU,CAACc,SADa,EAExBrC,WAAW,KAAK,UAAhB,IAA8B;AAAEiC,UAAAA,SAAS,EAAE,CAAC;AAAEK,YAAAA,MAAM,EAAE;AAAV,WAAD;AAAb,SAFN,EAGxBnB,KAHwB,CAAnB,CAFT;AAOE,QAAA,QAAQ,EAAE,KAAKoB,gBAAL,CAAsBzG,IAAtB,CAA2B,IAA3B,CAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UASE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAEqG,UAAU,CAACC,OAAX,CAAmB,CACxB;AAAEjD,UAAAA,eAAe,EAAE6B;AAAnB,SADwB,EAExBO,UAAU,CAACiB,KAFa,EAGxBpB,UAHwB,CAAnB,CADT;AAME,QAAA,QAAQ,EAAE,KAAKqB,YAAL,CAAkB3G,IAAlB,CAAuB,IAAvB,CANZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,EAiBE,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,KAAK,EAAEqG,UAAU,CAACC,OAAX,CAAmB,CACxBb,UAAU,CAACiB,KADa,EAExBpB,UAFwB,EAGxBS,iBAHwB,CAAnB,CADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAjBF,EAwBE,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,MAAM,EAAC,aADT;AAEE,QAAA,QAAQ,EAAE,KAAKa,YAAL,CAAkB5G,IAAlB,CAAuB,IAAvB,CAFZ;AAGE,QAAA,KAAK,EAAEqG,UAAU,CAACC,OAAX,CAAmB,CACxB;AAAEjD,UAAAA,eAAe,EAAE8B;AAAnB,SADwB,EAExBM,UAAU,CAACoB,KAFa,EAGxBtB,UAHwB;AAKtBY,UAAAA,SAAS,GACP;AAAEW,YAAAA,UAAU,EAAE7C;AAAd,WADO,EAEP;AAAE8C,YAAAA,UAAU,EAAE,EAAE1H,SAAS,CAACL,MAAV,GAAmBM,SAAS,CAACN,MAA/B,IAAyC;AAAvD,WAFO,4BAGJkH,mBAHI;AALa,WAUnBJ,iBAVmB,EAAnB,CAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAxBF,EAyCE,oBAAC,IAAD;AACE,QAAA,KAAK,EAAEO,UAAU,CAACC,OAAX,CAAmB,CAACZ,MAAM,CAACsB,SAAR,EAAmBpE,kBAAnB,CAAnB;AADT,SAEM,KAAKjD,YAAL,CAAkBsH,WAFxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAIG7D,cAAc,KAAK,IAAnB,IAA2B,KAAK8D,yBAAL,CAA+BjD,SAA/B,CAJ9B,CAzCF,CADF;AAkDD;;;;EAhXkBtG,S;;AAmXrBsB,MAAM,CAACkI,SAAP,GAAmB;AASjB3H,EAAAA,KAAK,EAAE5B,SAAS,CAACwJ,MATA;AAejBxF,EAAAA,QAAQ,EAAEhE,SAAS,CAACyJ,IAfH;AAoBjB9C,EAAAA,YAAY,EAAE3G,SAAS,CAACwJ,MApBP;AAyBjB3C,EAAAA,YAAY,EAAE7G,SAAS,CAACwJ,MAzBP;AA+BjB9C,EAAAA,IAAI,EAAE1G,SAAS,CAACwJ,MA/BC;AAqCjBnC,EAAAA,qBAAqB,EAAErH,SAAS,CAAC0J,MArChB;AA2CjBpC,EAAAA,qBAAqB,EAAEtH,SAAS,CAAC0J,MA3ChB;AAgDjBnC,EAAAA,cAAc,EAAEvH,SAAS,CAAC0J,MAhDT;AAyDjB5E,EAAAA,cAAc,EAAE9E,SAAS,CAAC2J,KAAV,CAAgB;AAC9BxI,IAAAA,KAAK,EAAEnB,SAAS,CAACwJ,MADa;AAE9BpI,IAAAA,MAAM,EAAEpB,SAAS,CAACwJ;AAFY,GAAhB,CAzDC;AAiEjBI,EAAAA,aAAa,EAAE5J,SAAS,CAAC6J,IAjER;AAuEjBC,EAAAA,cAAc,EAAE9J,SAAS,CAAC6J,IAvET;AA6EjBE,EAAAA,iBAAiB,EAAE/J,SAAS,CAAC6J,IA7EZ;AAkFjBpC,EAAAA,KAAK,EAAExH,aAAa,CAACwH,KAlFJ;AAuFjBC,EAAAA,UAAU,EAAEzH,aAAa,CAACwH,KAvFT;AA4FjBE,EAAAA,UAAU,EAAE1H,aAAa,CAACwH,KA5FT;AAiGjBjC,EAAAA,cAAc,EAAExF,SAAS,CAACyJ,IAjGT;AAsGjBvG,EAAAA,kBAAkB,EAAElD,SAAS,CAACyJ,IAtGb;AA2GjBnG,EAAAA,aAAa,EAAEtD,SAAS,CAACgK,KAAV,CAAgB,CAAC,QAAD,EAAW,QAAX,CAAhB,CA3GE;AAgHjB1D,EAAAA,WAAW,EAAEtG,SAAS,CAACgK,KAAV,CAAgB,CAAC,YAAD,EAAe,UAAf,CAAhB,CAhHI;AAqHjBzG,EAAAA,eAAe,EAAEvD,SAAS,CAACiK,MArHV;AAsHjBzC,EAAAA,cAAc,EAAEvH,aAAa,CAACwH;AAtHb,CAAnB;AAyHApG,MAAM,CAAC6I,YAAP,GAAsB;AACpBtI,EAAAA,KAAK,EAAE,CADa;AAEpB+E,EAAAA,YAAY,EAAE,CAFM;AAGpBE,EAAAA,YAAY,EAAE,CAHM;AAIpBH,EAAAA,IAAI,EAAE,CAJc;AAKpBW,EAAAA,qBAAqB,EAAE,SALH;AAMpBC,EAAAA,qBAAqB,EAAE,SANH;AAOpBC,EAAAA,cAAc,EAAE,KAPI;AAQpBzC,EAAAA,cAAc,EAAE;AAAE3D,IAAAA,KAAK,EAAE,EAAT;AAAaC,IAAAA,MAAM,EAAE;AAArB,GARI;AASpBoE,EAAAA,cAAc,EAAE,KATI;AAUpBlC,EAAAA,aAAa,EAAE,QAVK;AAWpBgD,EAAAA,WAAW,EAAE;AAXO,CAAtB;AAcA,IAAMwB,MAAM,GAAGW,UAAU,CAACxG,MAAX,CAAkB;AAC/B0G,EAAAA,SAAS,EAAE;AACTvH,IAAAA,MAAM,EAAE,EADC;AAET+I,IAAAA,cAAc,EAAE;AAFP,GADoB;AAK/BrB,EAAAA,KAAK,EAAE;AACL1H,IAAAA,MAAM,EAAEjB,UADH;AAELiK,IAAAA,YAAY,EAAEjK,UAAU,GAAG;AAFtB,GALwB;AAS/B8I,EAAAA,KAAK,EAAE;AACLb,IAAAA,QAAQ,EAAE,UADL;AAELjH,IAAAA,KAAK,EAAEf,UAFF;AAGLgB,IAAAA,MAAM,EAAEhB,UAHH;AAILgK,IAAAA,YAAY,EAAEhK,UAAU,GAAG,CAJtB;AAKLgH,IAAAA,GAAG,EAAE;AALA,GATwB;AAgB/BgC,EAAAA,SAAS,EAAE;AACThB,IAAAA,QAAQ,EAAE,UADD;AAET3C,IAAAA,eAAe,EAAE,aAFR;AAGT2B,IAAAA,GAAG,EAAE,CAHI;AAITD,IAAAA,IAAI,EAAE,CAJG;AAKTkD,IAAAA,KAAK,EAAE,CALE;AAMTC,IAAAA,MAAM,EAAE;AANC,GAhBoB;AAwB/BC,EAAAA,mBAAmB,EAAE;AACnBnC,IAAAA,QAAQ,EAAE,UADS;AAEnB3C,IAAAA,eAAe,EAAE,OAFE;AAGnBC,IAAAA,OAAO,EAAE;AAHU;AAxBU,CAAlB,CAAf;AA+BA,SAASrE,MAAT;AACA,eAAenB,SAAS,CAACmB,MAAD,EAAS,QAAT,CAAxB","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { View, StyleSheet, Animated, Easing, PanResponder } from 'react-native';\n\nimport { ViewPropTypes, withTheme } from '../config';\n\nconst TRACK_SIZE = 4;\nconst THUMB_SIZE = 20;\n\nvar DEFAULT_ANIMATION_CONFIGS = {\n  spring: {\n    friction: 7,\n    tension: 100,\n  },\n  timing: {\n    duration: 150,\n    easing: Easing.inOut(Easing.ease),\n    delay: 0,\n  },\n};\n\nclass Rect {\n  constructor(x, y, width, height) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n  containsPoint(x, y) {\n    return (\n      x >= this.x &&\n      y >= this.y &&\n      x <= this.x + this.width &&\n      y <= this.y + this.height\n    );\n  }\n}\n\nclass Slider extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      containerSize: { width: 0, height: 0 },\n      trackSize: { width: 0, height: 0 },\n      thumbSize: { width: 0, height: 0 },\n      allMeasured: false,\n      value: new Animated.Value(props.value),\n    };\n  }\n\n  componentWillMount() {\n    this.panResponder = PanResponder.create({\n      onStartShouldSetPanResponder: this.handleStartShouldSetPanResponder.bind(\n        this\n      ),\n      onMoveShouldSetPanResponder: this.handleMoveShouldSetPanResponder.bind(\n        this\n      ),\n      onPanResponderGrant: this.handlePanResponderGrant.bind(this),\n      onPanResponderMove: this.handlePanResponderMove.bind(this),\n      onPanResponderRelease: this.handlePanResponderEnd.bind(this),\n      onPanResponderTerminationRequest: this.handlePanResponderRequestEnd.bind(\n        this\n      ),\n      onPanResponderTerminate: this.handlePanResponderEnd.bind(this),\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    var newValue = nextProps.value;\n\n    if (this.props.value !== newValue) {\n      if (this.props.animateTransitions) {\n        this.setCurrentValueAnimated(newValue);\n      } else {\n        this.setCurrentValue(newValue);\n      }\n    }\n  }\n\n  setCurrentValue(value) {\n    this.state.value.setValue(value);\n  }\n\n  setCurrentValueAnimated(value) {\n    var animationType = this.props.animationType;\n    var animationConfig = Object.assign(\n      {},\n      DEFAULT_ANIMATION_CONFIGS[animationType],\n      this.props.animationConfig,\n      {\n        toValue: value,\n      }\n    );\n\n    Animated[animationType](this.state.value, animationConfig).start();\n  }\n\n  handleMoveShouldSetPanResponder(/*e: Object, gestureState: Object*/) {\n    // Should we become active when the user moves a touch over the thumb?\n    return false;\n  }\n\n  handlePanResponderGrant(/*e: Object, gestureState: Object*/) {\n    this._previousLeft = this.getThumbLeft(this.getCurrentValue());\n    this.fireChangeEvent('onSlidingStart');\n  }\n\n  handlePanResponderMove(_, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onValueChange');\n  }\n\n  handlePanResponderRequestEnd() {\n    // Should we allow another component to take over this pan?\n    return false;\n  }\n\n  handlePanResponderEnd(_, gestureState) {\n    if (this.props.disabled) {\n      return;\n    }\n\n    this.setCurrentValue(this.getValue(gestureState));\n    this.fireChangeEvent('onSlidingComplete');\n  }\n\n  thumbHitTest(e) {\n    var nativeEvent = e.nativeEvent;\n    var thumbTouchRect = this.getThumbTouchRect();\n    return thumbTouchRect.containsPoint(\n      nativeEvent.locationX,\n      nativeEvent.locationY\n    );\n  }\n\n  handleStartShouldSetPanResponder(e /*gestureState: Object*/) {\n    // Should we become active when the user presses down on the thumb?\n    return this.thumbHitTest(e);\n  }\n\n  fireChangeEvent(event) {\n    if (this.props[event]) {\n      this.props[event](this.getCurrentValue());\n    }\n  }\n\n  getTouchOverflowSize() {\n    var state = this.state;\n    var props = this.props;\n\n    var size = {};\n    if (state.allMeasured === true) {\n      size.width = Math.max(\n        0,\n        props.thumbTouchSize.width - state.thumbSize.width\n      );\n      size.height = Math.max(\n        0,\n        props.thumbTouchSize.height - state.containerSize.height\n      );\n    }\n\n    return size;\n  }\n\n  getTouchOverflowStyle() {\n    var { width, height } = this.getTouchOverflowSize();\n\n    var touchOverflowStyle = {};\n    if (width !== undefined && height !== undefined) {\n      var verticalMargin = -height / 2;\n      touchOverflowStyle.marginTop = verticalMargin;\n      touchOverflowStyle.marginBottom = verticalMargin;\n\n      var horizontalMargin = -width / 2;\n      touchOverflowStyle.marginLeft = horizontalMargin;\n      touchOverflowStyle.marginRight = horizontalMargin;\n    }\n\n    if (this.props.debugTouchArea === true) {\n      touchOverflowStyle.backgroundColor = 'orange';\n      touchOverflowStyle.opacity = 0.5;\n    }\n\n    return touchOverflowStyle;\n  }\n\n  handleMeasure(name, x) {\n    var { width, height } = x.nativeEvent.layout;\n    var size = { width: width, height: height };\n\n    var storeName = `_${name}`;\n    var currentSize = this[storeName];\n    if (\n      currentSize &&\n      width === currentSize.width &&\n      height === currentSize.height\n    ) {\n      return;\n    }\n    this[storeName] = size;\n\n    if (this._containerSize && this._trackSize && this._thumbSize) {\n      this.setState({\n        containerSize: this._containerSize,\n        trackSize: this._trackSize,\n        thumbSize: this._thumbSize,\n        allMeasured: true,\n      });\n    }\n  }\n\n  measureContainer(x) {\n    this.handleMeasure('containerSize', x);\n  }\n\n  measureTrack(x) {\n    this.handleMeasure('trackSize', x);\n  }\n\n  measureThumb(x) {\n    this.handleMeasure('thumbSize', x);\n  }\n\n  getValue(gestureState) {\n    var length = this.state.containerSize.width - this.state.thumbSize.width;\n    var thumbLeft =\n      this._previousLeft +\n      (this.props.orientation === 'vertical'\n        ? gestureState.dy\n        : gestureState.dx);\n\n    var ratio = thumbLeft / length;\n\n    if (this.props.step) {\n      return Math.max(\n        this.props.minimumValue,\n        Math.min(\n          this.props.maximumValue,\n          this.props.minimumValue +\n            Math.round(\n              ratio *\n                (this.props.maximumValue - this.props.minimumValue) /\n                this.props.step\n            ) *\n              this.props.step\n        )\n      );\n    } else {\n      return Math.max(\n        this.props.minimumValue,\n        Math.min(\n          this.props.maximumValue,\n          ratio * (this.props.maximumValue - this.props.minimumValue) +\n            this.props.minimumValue\n        )\n      );\n    }\n  }\n\n  getCurrentValue() {\n    return this.state.value.__getValue();\n  }\n\n  getRatio(value) {\n    return (\n      (value - this.props.minimumValue) /\n      (this.props.maximumValue - this.props.minimumValue)\n    );\n  }\n\n  getThumbLeft(value) {\n    var ratio = this.getRatio(value);\n    return (\n      ratio * (this.state.containerSize.width - this.state.thumbSize.width)\n    );\n  }\n\n  getThumbTouchRect() {\n    var state = this.state;\n    var props = this.props;\n    var touchOverflowSize = this.getTouchOverflowSize();\n\n    return new Rect(\n      touchOverflowSize.width / 2 +\n        this.getThumbLeft(this.getCurrentValue()) +\n        (state.thumbSize.width - props.thumbTouchSize.width) / 2,\n      touchOverflowSize.height / 2 +\n        (state.containerSize.height - props.thumbTouchSize.height) / 2,\n      props.thumbTouchSize.width,\n      props.thumbTouchSize.height\n    );\n  }\n\n  renderDebugThumbTouchRect(thumbLeft) {\n    var thumbTouchRect = this.getThumbTouchRect();\n    var positionStyle = {\n      left: thumbLeft,\n      top: thumbTouchRect.y,\n      width: thumbTouchRect.width,\n      height: thumbTouchRect.height,\n    };\n    return <Animated.View style={positionStyle} pointerEvents=\"none\" />;\n  }\n\n  render() {\n    const {\n      minimumValue,\n      maximumValue,\n      minimumTrackTintColor,\n      maximumTrackTintColor,\n      thumbTintColor,\n      containerStyle,\n      style,\n      trackStyle,\n      thumbStyle,\n      debugTouchArea,\n      orientation,\n      ...other\n    } = this.props;\n\n    var {\n      value,\n      containerSize,\n      trackSize,\n      thumbSize,\n      allMeasured,\n    } = this.state;\n\n    var mainStyles = containerStyle || styles;\n    var thumbLeft = value.interpolate({\n      inputRange: [minimumValue, maximumValue],\n      outputRange: [0, containerSize.width - thumbSize.width],\n      //extrapolate: 'clamp',\n    });\n\n    var valueVisibleStyle = {};\n    if (!allMeasured) {\n      valueVisibleStyle.opacity = 0;\n    }\n\n    var minimumTrackStyle = {\n      position: 'absolute',\n      width: Animated.add(thumbLeft, thumbSize.width / 2),\n      marginTop: -trackSize.height,\n      backgroundColor: minimumTrackTintColor,\n      ...valueVisibleStyle,\n    };\n\n    const thumbStyleTransform = (thumbStyle && thumbStyle.transform) || [];\n    var touchOverflowStyle = this.getTouchOverflowStyle();\n    return (\n      <View\n        {...other}\n        style={StyleSheet.flatten([\n          mainStyles.container,\n          orientation === 'vertical' && { transform: [{ rotate: '90deg' }] },\n          style,\n        ])}\n        onLayout={this.measureContainer.bind(this)}\n      >\n        <View\n          style={StyleSheet.flatten([\n            { backgroundColor: maximumTrackTintColor },\n            mainStyles.track,\n            trackStyle,\n          ])}\n          onLayout={this.measureTrack.bind(this)}\n        />\n        <Animated.View\n          style={StyleSheet.flatten([\n            mainStyles.track,\n            trackStyle,\n            minimumTrackStyle,\n          ])}\n        />\n        <Animated.View\n          testID=\"sliderThumb\"\n          onLayout={this.measureThumb.bind(this)}\n          style={StyleSheet.flatten([\n            { backgroundColor: thumbTintColor },\n            mainStyles.thumb,\n            thumbStyle,\n            {\n              transform: [\n                { translateX: thumbLeft },\n                { translateY: -(trackSize.height + thumbSize.height) / 2 },\n                ...thumbStyleTransform,\n              ],\n              ...valueVisibleStyle,\n            },\n          ])}\n        />\n        <View\n          style={StyleSheet.flatten([styles.touchArea, touchOverflowStyle])}\n          {...this.panResponder.panHandlers}\n        >\n          {debugTouchArea === true && this.renderDebugThumbTouchRect(thumbLeft)}\n        </View>\n      </View>\n    );\n  }\n}\n\nSlider.propTypes = {\n  /**\n   * Initial value of the slider. The value should be between minimumValue\n   * and maximumValue, which default to 0 and 1 respectively.\n   * Default value is 0.\n   *\n   * *This is not a controlled component*, e.g. if you don't update\n   * the value, the component won't be reset to its inital value.\n   */\n  value: PropTypes.number,\n\n  /**\n   * If true the user won't be able to move the slider.\n   * Default value is false.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Initial minimum value of the slider. Default value is 0.\n   */\n  minimumValue: PropTypes.number,\n\n  /**\n   * Initial maximum value of the slider. Default value is 1.\n   */\n  maximumValue: PropTypes.number,\n\n  /**\n   * Step value of the slider. The value should be between 0 and\n   * (maximumValue - minimumValue). Default value is 0.\n   */\n  step: PropTypes.number,\n\n  /**\n   * The color used for the track to the left of the button. Overrides the\n   * default blue gradient image.\n   */\n  minimumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the track to the right of the button. Overrides the\n   * default blue gradient image.\n   */\n  maximumTrackTintColor: PropTypes.string,\n\n  /**\n   * The color used for the thumb.\n   */\n  thumbTintColor: PropTypes.string,\n\n  /**\n   * The size of the touch area that allows moving the thumb.\n   * The touch area has the same center has the visible thumb.\n   * This allows to have a visually small thumb while still allowing the user\n   * to move it easily.\n   * The default is {width: 40, height: 40}.\n   */\n  thumbTouchSize: PropTypes.shape({\n    width: PropTypes.number,\n    height: PropTypes.number,\n  }),\n\n  /**\n   * Callback continuously called while the user is dragging the slider.\n   */\n  onValueChange: PropTypes.func,\n\n  /**\n   * Callback called when the user starts changing the value (e.g. when\n   * the slider is pressed).\n   */\n  onSlidingStart: PropTypes.func,\n\n  /**\n   * Callback called when the user finishes changing the value (e.g. when\n   * the slider is released).\n   */\n  onSlidingComplete: PropTypes.func,\n\n  /**\n   * The style applied to the slider container.\n   */\n  style: ViewPropTypes.style,\n\n  /**\n   * The style applied to the track.\n   */\n  trackStyle: ViewPropTypes.style,\n\n  /**\n   * The style applied to the thumb.\n   */\n  thumbStyle: ViewPropTypes.style,\n\n  /**\n   * Set this to true to visually see the thumb touch rect in green.\n   */\n  debugTouchArea: PropTypes.bool,\n\n  /**\n   * Set to true to animate values with default 'timing' animation type\n   */\n  animateTransitions: PropTypes.bool,\n\n  /**\n   * Custom Animation type. 'spring' or 'timing'.\n   */\n  animationType: PropTypes.oneOf(['spring', 'timing']),\n\n  /**\n   * Choose the orientation. 'horizontal' or 'vertical'.\n   */\n  orientation: PropTypes.oneOf(['horizontal', 'vertical']),\n\n  /**\n   * Used to configure the animation parameters.  These are the same parameters in the Animated library.\n   */\n  animationConfig: PropTypes.object,\n  containerStyle: ViewPropTypes.style,\n};\n\nSlider.defaultProps = {\n  value: 0,\n  minimumValue: 0,\n  maximumValue: 1,\n  step: 0,\n  minimumTrackTintColor: '#3f3f3f',\n  maximumTrackTintColor: '#b3b3b3',\n  thumbTintColor: 'red',\n  thumbTouchSize: { width: 40, height: 40 },\n  debugTouchArea: false,\n  animationType: 'timing',\n  orientation: 'horizontal',\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    height: 40,\n    justifyContent: 'center',\n  },\n  track: {\n    height: TRACK_SIZE,\n    borderRadius: TRACK_SIZE / 2,\n  },\n  thumb: {\n    position: 'absolute',\n    width: THUMB_SIZE,\n    height: THUMB_SIZE,\n    borderRadius: THUMB_SIZE / 2,\n    top: 22,\n  },\n  touchArea: {\n    position: 'absolute',\n    backgroundColor: 'transparent',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n  },\n  debugThumbTouchArea: {\n    position: 'absolute',\n    backgroundColor: 'green',\n    opacity: 0.5,\n  },\n});\n\nexport { Slider };\nexport default withTheme(Slider, 'Slider');\n"]},"metadata":{},"sourceType":"module"}