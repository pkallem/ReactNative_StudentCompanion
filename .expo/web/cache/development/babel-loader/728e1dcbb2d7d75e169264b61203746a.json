{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport DeviceSensor from \"./DeviceSensor\";\nimport ExpoBarometer from \"./ExpoBarometer\";\n\nvar BarometerSensor = function (_DeviceSensor) {\n  _inherits(BarometerSensor, _DeviceSensor);\n\n  var _super = _createSuper(BarometerSensor);\n\n  function BarometerSensor() {\n    _classCallCheck(this, BarometerSensor);\n\n    return _super.apply(this, arguments);\n  }\n\n  return BarometerSensor;\n}(DeviceSensor);\n\nexport default new BarometerSensor(ExpoBarometer, 'barometerDidUpdate');","map":{"version":3,"sources":["../src/Barometer.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,YAAP;AACA,OAAO,aAAP;;IAOM,e;;;;;;;;;;;;EAAwB,Y;;AAE9B,eAAe,IAAI,eAAJ,CAAoB,aAApB,EAAmC,oBAAnC,CAAf","sourcesContent":["import DeviceSensor from './DeviceSensor';\nimport ExpoBarometer from './ExpoBarometer';\n\nexport interface BarometerMeasurement {\n  pressure: number;\n  relativeAltitude?: number;\n}\n\nclass BarometerSensor extends DeviceSensor<BarometerMeasurement> {}\n\nexport default new BarometerSensor(ExpoBarometer, 'barometerDidUpdate');\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}