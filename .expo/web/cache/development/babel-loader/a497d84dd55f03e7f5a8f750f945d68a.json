{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\prana\\\\Desktop\\\\iits-app-main\\\\screens\\\\TabFourScreen.tsx\";\n\nimport React, { useState } from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Switch from \"react-native-web/dist/exports/Switch\";\nimport { Text, View } from \"../components/Themed\";\nvar ONE_SECOND_IN_MS = 1;\nvar PATTERN = [1 * ONE_SECOND_IN_MS, 2 * ONE_SECOND_IN_MS, 3 * ONE_SECOND_IN_MS];\n\nvar _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isEnabled = _useState2[0],\n    setIsEnabled = _useState2[1];\n\nvar toggleSwitch = function toggleSwitch() {\n  return setIsEnabled(function (previousState) {\n    return !previousState;\n  });\n};\n\nvar PATTERN_DESC = Platform.OS === 'android' ? 'wait 1s, vibrate 2s, wait 3s' : 'wait 1s, vibrate, wait 2s, vibrate, wait 3s';\nimport Modal from 'react-native-modal';\n\nvar Separator = function Separator() {\n  return React.createElement(View, {\n    style: Platform.OS === 'android' ? styles.separator : null,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 10\n    }\n  });\n};\n\nvar TabFourScreen = function () {\n  function TabFourScreen() {\n    var _this2 = this;\n\n    _classCallCheck(this, TabFourScreen);\n\n    this.state = {\n      isModalVisible: false\n    };\n\n    this._showModal = function () {\n      return _this2.setState({\n        isModalVisible: true\n      });\n    };\n\n    this._hideModal = function () {\n      return _this2.setState({\n        isModalVisible: false\n      });\n    };\n  }\n\n  _createClass(TabFourScreen, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 7\n        }\n      }, \"Health & Wellness\"), React.createElement(View, {\n        style: styles.separator,\n        lightColor: \"#eee\",\n        darkColor: \"rgba(255,255,255,0.1)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 7\n        }\n      }, \"Pedometer\"), React.createElement(Text, {\n        style: styles.body,\n        onPress: this._showModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 7\n        }\n      }, \"Massager\"), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 7\n        }\n      }, \"Mental Health + Positive Messages\"), React.createElement(Text, {\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 7\n        }\n      }, \"Tools\"), React.createElement(View, {\n        style: styles.separator,\n        lightColor: \"#eee\",\n        darkColor: \"rgba(255,255,255,0.1)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 7\n        }\n      }, \"Scanner\"), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 7\n        }\n      }, \"Calculator\"), React.createElement(Text, {\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 7\n        }\n      }, \"General\"), React.createElement(View, {\n        style: styles.separator,\n        lightColor: \"#eee\",\n        darkColor: \"rgba(255,255,255,0.1)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }\n      }, \"Calendar\"), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 7\n        }\n      }, \"Daily Reminders (Homework, Exercise)\"), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 7\n        }\n      }, \"Timer (Pomo, Regular)\"), React.createElement(Modal, {\n        isVisible: this.state.isModalVisible,\n        style: {\n          backgroundColor: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 13\n        }\n      }, React.createElement(Switch, {\n        trackColor: {\n          false: '#767577',\n          true: '#81b0ff'\n        },\n        thumbColor: isEnabled ? '#f5dd4b' : '#f4f3f4',\n        ios_backgroundColor: \"#3e3e3e\",\n        onValueChange: toggleSwitch,\n        value: isEnabled,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }\n      }))));\n    }\n  }]);\n\n  return TabFourScreen;\n}();\n\nexport { TabFourScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold'\n  },\n  body: {\n    fontSize: 20,\n    fontWeight: 'normal',\n    flex: .1\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%'\n  },\n  massagecontainer: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: 44,\n    padding: 8\n  },\n  massageheader: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  massageparagraph: {\n    margin: 24,\n    textAlign: 'center'\n  },\n  massageseparator: {\n    marginVertical: 8,\n    borderBottomColor: '#737373',\n    borderBottomWidth: StyleSheet.hairlineWidth\n  }\n});","map":{"version":3,"sources":["C:/Users/prana/Desktop/iits-app-main/screens/TabFourScreen.tsx"],"names":["React","useState","Text","View","ONE_SECOND_IN_MS","PATTERN","isEnabled","setIsEnabled","toggleSwitch","previousState","PATTERN_DESC","Platform","OS","Modal","Separator","styles","separator","TabFourScreen","state","isModalVisible","_showModal","setState","_hideModal","container","title","body","backgroundColor","false","true","StyleSheet","create","flex","fontSize","fontWeight","marginVertical","height","width","massagecontainer","justifyContent","paddingTop","padding","massageheader","textAlign","massageparagraph","margin","massageseparator","borderBottomColor","borderBottomWidth","hairlineWidth"],"mappings":"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","sourcesContent":["import React, { Component, useState } from 'react';\nimport { Button, Platform, Vibration, SafeAreaView, StyleSheet, Switch } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\n\nimport { Text, View} from '../components/Themed';\nconst ONE_SECOND_IN_MS = 1;\n\n  const PATTERN = [1 * ONE_SECOND_IN_MS, 2 * ONE_SECOND_IN_MS, 3 * ONE_SECOND_IN_MS];\n\n  const [isEnabled, setIsEnabled] = useState(false);\n  const toggleSwitch = () => setIsEnabled(previousState => !previousState);\n\n  const PATTERN_DESC =\n    Platform.OS === 'android'\n      ? 'wait 1s, vibrate 2s, wait 3s'\n      : 'wait 1s, vibrate, wait 2s, vibrate, wait 3s';\nimport Modal from 'react-native-modal';\nconst Separator = () => {\n  return <View style={Platform.OS === 'android' ? styles.separator : null} />;\n};\nexport default class TabFourScreen {\n  state = {\n    isModalVisible: false\n  }\n  \n  _showModal = () => this.setState({ isModalVisible: true })\n \n  _hideModal = () => this.setState({ isModalVisible: false })\n \n  render () {\n    return (\n      // <View style={{ flex: 1 }}>\n      //   <Text>Enter</Text>\n      //   <Text>Enter</Text>\n      //   <Text onPress={this._showModal}>Enter</Text>\n      //   <TouchableOpacity>\n      //     <Text>Show Modal</Text>\n      //   </TouchableOpacity>\n        \n      // </View>\n\n      <View style={styles.container}>\n      <Text style={styles.title}></Text>\n      <Text style={styles.title}>Health & Wellness</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> \n      <Text style={styles.body}>Pedometer</Text>      \n      <Text style={styles.body} onPress={this._showModal}>Massager</Text>\n      <Text style={styles.body}>Mental Health + Positive Messages</Text>\n\n      <Text style={styles.title}></Text>\n      <Text style={styles.title}>Tools</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> \n      <Text style={styles.body}>Scanner</Text>      \n      <Text style={styles.body}>Calculator</Text>\n\n      <Text style={styles.title}></Text>\n      <Text style={styles.title}>General</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> \n      <Text style={styles.body}>Calendar</Text>      \n      <Text style={styles.body}>Daily Reminders (Homework, Exercise)</Text>\n      <Text style={styles.body}>Timer (Pomo, Regular)</Text>\n\n      <Modal isVisible={this.state.isModalVisible} style={{backgroundColor: 'white'}}>  \n          \n            <View style={styles.container}>\n            <Switch\n              trackColor={{ false: '#767577', true: '#81b0ff' }}\n              thumbColor={isEnabled ? '#f5dd4b' : '#f4f3f4'}\n              ios_backgroundColor=\"#3e3e3e\"\n              onValueChange={toggleSwitch}\n              value={isEnabled}\n            />\n          </View>\n\n          {/* <SafeAreaView style={styles.massagecontainer}>\n          <Text style={[styles.massageheader, styles.massageparagraph]}>Massager</Text>\n            <Button title=\"Vibrate once\" onPress={() => Vibration.vibrate()} />\n\n          <Separator />\n          {Platform.OS == 'android'\n            ? [\n                <View>\n                  <Button\n                    title=\"Vibrate for 10 seconds\"\n                    onPress={() => Vibration.vibrate(10 * ONE_SECOND_IN_MS)}\n                  />\n                </View>,\n                <Separator />,\n              ]\n            : null}\n          <Text style={styles.massageparagraph}>Pattern: {PATTERN_DESC}</Text>\n          <Button title=\"Vibrate with pattern\" onPress={() => Vibration.vibrate(PATTERN)} />\n          <Separator />\n          <Button\n            title=\"Vibrate with pattern until cancelled\"\n            onPress={() => Vibration.vibrate(PATTERN, true)}\n          />\n          <Separator />\n          <Button title=\"Stop vibration pattern\" onPress={() => Vibration.cancel()} color=\"#FF0000\" />\n          <Separator />\n          <Button title=\"Close\" onPress={() => this._hideModal()} color=\"#FF0000\" />\n        </SafeAreaView> */}\n          {/* <View style={{ flex: 1 }}>\n            <Text>Must work!</Text>\n            \n              <Text onPress={this._hideModal}>Hide Modal</Text>\n            \n          </View> */}\n        </Modal>\n    </View>\n    )\n  }\n}\n\n\n\n// export default function TabFourScreen() {\n//   return (\n//     <View style={styles.container}>\n//       <Text style={styles.title}></Text>\n//       <Text style={styles.title}>Health & Wellness</Text>\n//       <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> \n//       <Text style={styles.body}>Pedometer</Text>      \n//       <Text style={styles.body}>Massager</Text>\n//       <Text style={styles.body}>Mental Health + Positive Messages</Text>\n\n//       <Text style={styles.title}></Text>\n//       <Text style={styles.title}>Tools</Text>\n//       <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> \n//       <Text style={styles.body}>Scanner</Text>      \n//       <Text style={styles.body}>Calculator</Text>\n\n//       <Text style={styles.title}></Text>\n//       <Text style={styles.title}>General</Text>\n//       <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> \n//       <Text style={styles.body}>Calendar</Text>      \n//       <Text style={styles.body}>Daily Reminders (Homework, Exercise)</Text>\n//       <Text style={styles.body}>Timer (Pomo, Regular)</Text>\n\n//       <Modal isVisible={this.state.isModalVisible} style={{backgroundColor: 'white'}}>\n//           <View style={{ flex: 1 }}>\n//             <Text>Must work!</Text>\n//             <TouchableOpacity onPress={this._hideModal}>\n//               <Text>Hide Modal</Text>\n//             </TouchableOpacity>\n//           </View>\n//         </Modal>\n//     </View>\n//   );\n// }\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // alignItems: 'center',\n    // justifyContent: 'flex-start',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n  },\n  body: {\n    fontSize: 20,\n    fontWeight: 'normal',\n    flex: .1,\n\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n  },\n  massagecontainer: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: 44,\n    padding: 8,\n  },\n  massageheader: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  massageparagraph: {\n    margin: 24,\n    textAlign: 'center',\n  },\n  massageseparator: {\n    marginVertical: 8,\n    borderBottomColor: '#737373',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}