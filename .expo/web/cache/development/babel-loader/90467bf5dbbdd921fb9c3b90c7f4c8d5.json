{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\prana\\\\Desktop\\\\iits-app-main\\\\node_modules\\\\react-native-elements\\\\src\\\\buttons\\\\Button.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { withTheme, ViewPropTypes } from \"../config\";\nimport { renderNode, nodeType } from \"../helpers\";\nimport Icon from \"../icons/Icon\";\n\nvar Button = function (_Component) {\n  _inherits(Button, _Component);\n\n  var _super = _createSuper(Button);\n\n  function Button() {\n    _classCallCheck(this, Button);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Button, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this$props = this.props,\n          linearGradientProps = _this$props.linearGradientProps,\n          ViewComponent = _this$props.ViewComponent;\n\n      if (linearGradientProps && !global.Expo && !ViewComponent) {\n        console.error(\"You need to pass a ViewComponent to use linearGradientProps !\\nExample: ViewComponent={require('react-native-linear-gradient')}\");\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props2 = this.props,\n          TouchableComponent = _this$props2.TouchableComponent,\n          containerStyle = _this$props2.containerStyle,\n          onPress = _this$props2.onPress,\n          buttonStyle = _this$props2.buttonStyle,\n          clear = _this$props2.clear,\n          loading = _this$props2.loading,\n          loadingStyle = _this$props2.loadingStyle,\n          loadingProps = _this$props2.loadingProps,\n          title = _this$props2.title,\n          titleProps = _this$props2.titleProps,\n          titleStyle = _this$props2.titleStyle,\n          icon = _this$props2.icon,\n          iconContainerStyle = _this$props2.iconContainerStyle,\n          iconRight = _this$props2.iconRight,\n          disabled = _this$props2.disabled,\n          disabledStyle = _this$props2.disabledStyle,\n          disabledTitleStyle = _this$props2.disabledTitleStyle,\n          raised = _this$props2.raised,\n          linearGradientProps = _this$props2.linearGradientProps,\n          _this$props2$ViewComp = _this$props2.ViewComponent,\n          ViewComponent = _this$props2$ViewComp === void 0 ? !disabled && linearGradientProps && global.Expo ? global.Expo.LinearGradient : View : _this$props2$ViewComp,\n          theme = _this$props2.theme,\n          attributes = _objectWithoutProperties(_this$props2, [\"TouchableComponent\", \"containerStyle\", \"onPress\", \"buttonStyle\", \"clear\", \"loading\", \"loadingStyle\", \"loadingProps\", \"title\", \"titleProps\", \"titleStyle\", \"icon\", \"iconContainerStyle\", \"iconRight\", \"disabled\", \"disabledStyle\", \"disabledTitleStyle\", \"raised\", \"linearGradientProps\", \"ViewComponent\", \"theme\"]);\n\n      if (Platform.OS === 'android' && buttonStyle.borderRadius && !attributes.background) {\n        if (Platform.Version >= 21) {\n          attributes.background = TouchableNativeFeedback.Ripple('ThemeAttrAndroid', true);\n        } else {\n          attributes.background = TouchableNativeFeedback.SelectableBackground();\n        }\n      }\n\n      return React.createElement(View, {\n        style: [containerStyle, raised && styles.raised],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 7\n        }\n      }, React.createElement(TouchableComponent, _extends({\n        onPress: onPress,\n        underlayColor: clear ? 'transparent' : undefined,\n        activeOpacity: clear ? 0 : undefined,\n        disabled: disabled\n      }, attributes, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 9\n        }\n      }), React.createElement(ViewComponent, _extends({}, linearGradientProps, {\n        style: StyleSheet.flatten([styles.button(theme), buttonStyle, disabled && styles.disabled, disabled && disabledStyle, clear && {\n          backgroundColor: 'transparent',\n          elevation: 0\n        }]),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }\n      }), loading && React.createElement(ActivityIndicator, _extends({\n        animating: true,\n        style: StyleSheet.flatten([styles.loading, loadingStyle]),\n        color: loadingProps.color,\n        size: loadingProps.size\n      }, loadingProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 15\n        }\n      })), !loading && icon && !iconRight && renderNode(Icon, icon, {\n        containerStyle: StyleSheet.flatten([styles.iconContainer, iconContainerStyle])\n      }), !loading && !!title && React.createElement(Text, _extends({\n        style: StyleSheet.flatten([styles.title, titleStyle, disabled && styles.disabledTitle, disabled && disabledTitleStyle])\n      }, titleProps, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 17\n        }\n      }), title), !loading && icon && iconRight && renderNode(Icon, icon, {\n        containerStyle: StyleSheet.flatten([styles.iconContainer, iconContainerStyle])\n      }))));\n    }\n  }]);\n\n  return Button;\n}(Component);\n\nButton.propTypes = {\n  title: PropTypes.string,\n  titleStyle: Text.propTypes.style,\n  titleProps: PropTypes.object,\n  buttonStyle: ViewPropTypes.style,\n  clear: PropTypes.bool,\n  loading: PropTypes.bool,\n  loadingStyle: ViewPropTypes.style,\n  loadingProps: PropTypes.object,\n  onPress: PropTypes.any,\n  containerStyle: ViewPropTypes.style,\n  icon: nodeType,\n  iconContainerStyle: ViewPropTypes.style,\n  iconRight: PropTypes.bool,\n  linearGradientProps: PropTypes.object,\n  TouchableComponent: PropTypes.any,\n  ViewComponent: PropTypes.any,\n  disabled: PropTypes.bool,\n  disabledStyle: ViewPropTypes.style,\n  disabledTitleStyle: Text.propTypes.style,\n  raised: PropTypes.bool,\n  theme: PropTypes.object\n};\nButton.defaultProps = {\n  title: 'Welcome to\\nReact Native Elements',\n  iconRight: false,\n  TouchableComponent: Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity,\n  onPress: function onPress() {\n    return console.log('Please attach a method to this component');\n  },\n  clear: false,\n  loadingProps: {\n    color: 'white',\n    size: 'small'\n  },\n  buttonStyle: {\n    borderRadius: 3\n  },\n  disabled: false,\n  raised: false,\n  loading: false\n};\nvar styles = {\n  button: function button(theme) {\n    return _objectSpread({\n      flexDirection: 'row',\n      justifyContent: 'center',\n      alignItems: 'center',\n      borderRadius: 3,\n      backgroundColor: theme.colors.primary\n    }, Platform.select({\n      android: {\n        elevation: 4,\n        borderRadius: 2\n      }\n    }));\n  },\n  disabled: {\n    backgroundColor: '#D1D5D8'\n  },\n  title: _objectSpread({\n    backgroundColor: 'transparent',\n    color: 'white',\n    fontSize: 16,\n    textAlign: 'center',\n    padding: 8\n  }, Platform.select({\n    ios: {\n      fontSize: 18\n    },\n    android: {\n      fontFamily: 'sans-serif-medium'\n    }\n  })),\n  disabledTitle: {\n    color: '#F3F4F5'\n  },\n  iconContainer: {\n    marginHorizontal: 5\n  },\n  raised: _objectSpread({}, Platform.select({\n    ios: {\n      shadowColor: 'rgba(0,0,0, .4)',\n      shadowOffset: {\n        height: 1,\n        width: 1\n      },\n      shadowOpacity: 1,\n      shadowRadius: 1\n    },\n    android: {\n      backgroundColor: '#fff',\n      elevation: 2\n    }\n  }))\n};\nexport { Button };\nexport default withTheme(Button, 'Button');","map":{"version":3,"sources":["C:/Users/prana/Desktop/iits-app-main/node_modules/react-native-elements/src/buttons/Button.js"],"names":["PropTypes","React","Component","withTheme","ViewPropTypes","renderNode","nodeType","Icon","Button","props","linearGradientProps","ViewComponent","global","Expo","console","error","TouchableComponent","containerStyle","onPress","buttonStyle","clear","loading","loadingStyle","loadingProps","title","titleProps","titleStyle","icon","iconContainerStyle","iconRight","disabled","disabledStyle","disabledTitleStyle","raised","LinearGradient","View","theme","attributes","Platform","OS","borderRadius","background","Version","TouchableNativeFeedback","Ripple","SelectableBackground","styles","undefined","StyleSheet","flatten","button","backgroundColor","elevation","color","size","iconContainer","disabledTitle","propTypes","string","Text","style","object","bool","any","defaultProps","TouchableOpacity","log","flexDirection","justifyContent","alignItems","colors","primary","select","android","fontSize","textAlign","padding","ios","fontFamily","marginHorizontal","shadowColor","shadowOffset","height","width","shadowOpacity","shadowRadius"],"mappings":"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","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport {\n  View,\n  Text,\n  TouchableNativeFeedback,\n  TouchableOpacity,\n  ActivityIndicator,\n  Platform,\n  StyleSheet,\n} from 'react-native';\n\nimport { withTheme, ViewPropTypes } from '../config';\nimport { renderNode, nodeType } from '../helpers';\nimport Icon from '../icons/Icon';\n\nclass Button extends Component {\n  componentDidMount() {\n    const { linearGradientProps, ViewComponent } = this.props;\n    if (linearGradientProps && !global.Expo && !ViewComponent) {\n      /* eslint-disable no-console */\n      console.error(\n        `You need to pass a ViewComponent to use linearGradientProps !\\nExample: ViewComponent={require('react-native-linear-gradient')}`\n      );\n    }\n  }\n\n  render() {\n    const {\n      TouchableComponent,\n      containerStyle,\n      onPress,\n      buttonStyle,\n      clear,\n      loading,\n      loadingStyle,\n      loadingProps,\n      title,\n      titleProps,\n      titleStyle,\n      icon,\n      iconContainerStyle,\n      iconRight,\n      disabled,\n      disabledStyle,\n      disabledTitleStyle,\n      raised,\n      linearGradientProps,\n      ViewComponent = !disabled && linearGradientProps && global.Expo\n        ? global.Expo.LinearGradient\n        : View,\n      theme,\n      ...attributes\n    } = this.props;\n\n    if (\n      Platform.OS === 'android' &&\n      (buttonStyle.borderRadius && !attributes.background)\n    ) {\n      if (Platform.Version >= 21) {\n        attributes.background = TouchableNativeFeedback.Ripple(\n          'ThemeAttrAndroid',\n          true\n        );\n      } else {\n        attributes.background = TouchableNativeFeedback.SelectableBackground();\n      }\n    }\n    return (\n      <View style={[containerStyle, raised && styles.raised]}>\n        <TouchableComponent\n          onPress={onPress}\n          underlayColor={clear ? 'transparent' : undefined}\n          activeOpacity={clear ? 0 : undefined}\n          disabled={disabled}\n          {...attributes}\n        >\n          <ViewComponent\n            {...linearGradientProps}\n            style={StyleSheet.flatten([\n              styles.button(theme),\n              buttonStyle,\n              disabled && styles.disabled,\n              disabled && disabledStyle,\n              clear && { backgroundColor: 'transparent', elevation: 0 },\n            ])}\n          >\n            {loading && (\n              <ActivityIndicator\n                animating={true}\n                style={StyleSheet.flatten([styles.loading, loadingStyle])}\n                color={loadingProps.color}\n                size={loadingProps.size}\n                {...loadingProps}\n              />\n            )}\n            {!loading &&\n              icon &&\n              !iconRight &&\n              renderNode(Icon, icon, {\n                containerStyle: StyleSheet.flatten([\n                  styles.iconContainer,\n                  iconContainerStyle,\n                ]),\n              })}\n            {!loading &&\n              !!title && (\n                <Text\n                  style={StyleSheet.flatten([\n                    styles.title,\n                    titleStyle,\n                    disabled && styles.disabledTitle,\n                    disabled && disabledTitleStyle,\n                  ])}\n                  {...titleProps}\n                >\n                  {title}\n                </Text>\n              )}\n            {!loading &&\n              icon &&\n              iconRight &&\n              renderNode(Icon, icon, {\n                containerStyle: StyleSheet.flatten([\n                  styles.iconContainer,\n                  iconContainerStyle,\n                ]),\n              })}\n          </ViewComponent>\n        </TouchableComponent>\n      </View>\n    );\n  }\n}\n\nButton.propTypes = {\n  title: PropTypes.string,\n  titleStyle: Text.propTypes.style,\n  titleProps: PropTypes.object,\n  buttonStyle: ViewPropTypes.style,\n  clear: PropTypes.bool,\n  loading: PropTypes.bool,\n  loadingStyle: ViewPropTypes.style,\n  loadingProps: PropTypes.object,\n  onPress: PropTypes.any,\n  containerStyle: ViewPropTypes.style,\n  icon: nodeType,\n  iconContainerStyle: ViewPropTypes.style,\n  iconRight: PropTypes.bool,\n  linearGradientProps: PropTypes.object,\n  TouchableComponent: PropTypes.any,\n  ViewComponent: PropTypes.any,\n  disabled: PropTypes.bool,\n  disabledStyle: ViewPropTypes.style,\n  disabledTitleStyle: Text.propTypes.style,\n  raised: PropTypes.bool,\n  theme: PropTypes.object,\n};\n\nButton.defaultProps = {\n  title: 'Welcome to\\nReact Native Elements',\n  iconRight: false,\n  TouchableComponent:\n    Platform.OS === 'android' ? TouchableNativeFeedback : TouchableOpacity,\n  onPress: () => console.log('Please attach a method to this component'),\n  clear: false,\n  loadingProps: {\n    color: 'white',\n    size: 'small',\n  },\n  buttonStyle: {\n    borderRadius: 3,\n  },\n  disabled: false,\n  raised: false,\n  loading: false,\n};\n\nconst styles = {\n  button: theme => ({\n    flexDirection: 'row',\n    justifyContent: 'center',\n    alignItems: 'center',\n    borderRadius: 3,\n    backgroundColor: theme.colors.primary,\n    ...Platform.select({\n      android: {\n        elevation: 4,\n        borderRadius: 2,\n      },\n    }),\n  }),\n  disabled: {\n    // grey from designmodo.github.io/Flat-UI/\n    backgroundColor: '#D1D5D8',\n  },\n  title: {\n    backgroundColor: 'transparent',\n    color: 'white',\n    fontSize: 16,\n    textAlign: 'center',\n    padding: 8,\n    ...Platform.select({\n      ios: {\n        fontSize: 18,\n      },\n      android: {\n        fontFamily: 'sans-serif-medium',\n      },\n    }),\n  },\n  disabledTitle: {\n    color: '#F3F4F5',\n  },\n  iconContainer: {\n    marginHorizontal: 5,\n  },\n  raised: {\n    ...Platform.select({\n      ios: {\n        shadowColor: 'rgba(0,0,0, .4)',\n        shadowOffset: { height: 1, width: 1 },\n        shadowOpacity: 1,\n        shadowRadius: 1,\n      },\n      android: {\n        backgroundColor: '#fff',\n        elevation: 2,\n      },\n    }),\n  },\n};\n\nexport { Button };\nexport default withTheme(Button, 'Button');\n"]},"metadata":{},"sourceType":"module"}