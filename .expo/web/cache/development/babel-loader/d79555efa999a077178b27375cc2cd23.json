{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { EventEmitter, UnavailabilityError } from '@unimodules/core';\nimport invariant from 'invariant';\nimport ExponentPedometer from \"./ExponentPedometer\";\nvar PedometerEventEmitter = new EventEmitter(ExponentPedometer);\nexport function watchStepCount(callback) {\n  return PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);\n}\nexport function getStepCountAsync(start, end) {\n  return _regeneratorRuntime.async(function getStepCountAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (ExponentPedometer.getStepCountAsync) {\n            _context.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('ExponentPedometer', 'getStepCountAsync');\n\n        case 2:\n          invariant(start <= end, 'Pedometer: The start date must precede the end date.');\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime()));\n\n        case 5:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 6:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(ExponentPedometer.isAvailableAsync());\n\n        case 2:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 3:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Pedometer.ts"],"names":[],"mappings":";AAAA,SAAS,YAAT,EAAuB,mBAAvB,QAAkD,kBAAlD;AACA,OAAO,SAAP,MAAsB,WAAtB;AAEA,OAAO,iBAAP;AAEA,IAAM,qBAAqB,GAAG,IAAI,YAAJ,CAAiB,iBAAjB,CAA9B;AAQA,OAAM,SAAU,cAAV,CAAyB,QAAzB,EAA0D;AAC9D,SAAO,qBAAqB,CAAC,WAAtB,CAAkC,0BAAlC,EAA8D,QAA9D,CAAP;AACD;AAED,OAAO,SAAe,iBAAf,CAAiC,KAAjC,EAA8C,GAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,cACA,iBAAiB,CAAC,iBADlB;AAAA;AAAA;AAAA;;AAAA,gBAEG,IAAI,mBAAJ,CAAwB,mBAAxB,EAA6C,mBAA7C,CAFH;;AAAA;AAIL,UAAA,SAAS,CAAC,KAAK,IAAI,GAAV,EAAe,sDAAf,CAAT;AAJK;AAAA,2CAKQ,iBAAiB,CAAC,iBAAlB,CAAoC,KAAK,CAAC,OAAN,EAApC,EAAqD,GAAG,CAAC,OAAJ,EAArD,CALR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQP,OAAO,SAAe,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACQ,iBAAiB,CAAC,gBAAlB,EADR;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { EventEmitter, UnavailabilityError } from '@unimodules/core';\nimport invariant from 'invariant';\n\nimport ExponentPedometer from './ExponentPedometer';\n\nconst PedometerEventEmitter = new EventEmitter(ExponentPedometer);\n\nexport type PedometerResult = { steps: number };\nexport type PedometerUpdateCallback = (result: PedometerResult) => void;\nexport interface PedometerListener {\n  remove: () => void;\n}\n\nexport function watchStepCount(callback: PedometerUpdateCallback): PedometerListener {\n  return PedometerEventEmitter.addListener('Exponent.pedometerUpdate', callback);\n}\n\nexport async function getStepCountAsync(start: Date, end: Date): Promise<PedometerResult> {\n  if (!ExponentPedometer.getStepCountAsync) {\n    throw new UnavailabilityError('ExponentPedometer', 'getStepCountAsync');\n  }\n  invariant(start <= end, 'Pedometer: The start date must precede the end date.');\n  return await ExponentPedometer.getStepCountAsync(start.getTime(), end.getTime());\n}\n\nexport async function isAvailableAsync(): Promise<boolean> {\n  return await ExponentPedometer.isAvailableAsync();\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}