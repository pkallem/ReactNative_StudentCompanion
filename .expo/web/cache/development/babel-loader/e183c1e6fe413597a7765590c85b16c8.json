{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\prana\\\\Desktop\\\\iits-app-main\\\\screens\\\\TabFourScreen.tsx\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport Vibration from \"react-native-web/dist/exports/Vibration\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { ScrollView } from 'react-native-gesture-handler';\nimport { Pedometer } from \"expo-sensors\";\nimport { Text, View } from \"../components/Themed\";\nvar ONE_SECOND_IN_MS = 1;\nvar PATTERN = [1 * ONE_SECOND_IN_MS, 2 * ONE_SECOND_IN_MS, 3 * ONE_SECOND_IN_MS];\nvar PATTERN_DESC = Platform.OS === 'android' ? 'wait 1s, vibrate 2s, wait 3s' : 'wait 1s, vibrate, wait 2s, vibrate, wait 3s';\nimport Modal from 'react-native-modal';\n\nvar Separator = function Separator() {\n  return React.createElement(View, {\n    style: Platform.OS === 'android' ? styles.separator : null,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 10\n    }\n  });\n};\n\nvar TabFourScreen = function (_Component) {\n  _inherits(TabFourScreen, _Component);\n\n  var _super = _createSuper(TabFourScreen);\n\n  function TabFourScreen() {\n    var _this2;\n\n    _classCallCheck(this, TabFourScreen);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _super.call.apply(_super, [this].concat(args));\n    _this2.state = {\n      isModalVisible: false,\n      isPedometerAvailable: \"checking\",\n      pastStepCount: 0,\n      currentStepCount: 0\n    };\n\n    _this2._showModal = function () {\n      return _this2.setState({\n        isModalVisible: true\n      });\n    };\n\n    _this2._hideModal = function () {\n      return _this2.setState({\n        isModalVisible: false\n      });\n    };\n\n    _this2._subscribe = function () {\n      _this2._subscription = Pedometer.watchStepCount(function (result) {\n        _this2.setState({\n          currentStepCount: result.steps\n        });\n      });\n      Pedometer.isAvailableAsync().then(function (result) {\n        _this2.setState({\n          isPedometerAvailable: String(result)\n        });\n      }, function (error) {\n        _this2.setState({\n          isPedometerAvailable: \"Could not get isPedometerAvailable: \" + error\n        });\n      });\n      var end = new Date();\n      var start = new Date();\n      start.setDate(end.getDate() - 1);\n      Pedometer.getStepCountAsync(start, end).then(function (result) {\n        _this2.setState({\n          pastStepCount: result.steps\n        });\n      }, function (error) {\n        _this2.setState({\n          pastStepCount: \"Could not get stepCount: \" + error\n        });\n      });\n    };\n\n    _this2._unsubscribe = function () {\n      _this2._subscription && _this2._subscription.remove();\n      _this2._subscription = null;\n    };\n\n    return _this2;\n  }\n\n  _createClass(TabFourScreen, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._subscribe();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._unsubscribe();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(ScrollView, {\n        style: styles.container,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 7\n        }\n      }, React.createElement(SafeAreaView, {\n        style: styles.massagecontainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 7\n        }\n      }, \"Health & Wellness\"), React.createElement(View, {\n        style: styles.separator,\n        lightColor: \"#eee\",\n        darkColor: \"rgba(255,255,255,0.1)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 7\n        }\n      }, \"Pedometer\"), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 7\n        }\n      }, \"PedometerStatus: \", this.state.isPedometerAvailable), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 9\n        }\n      }, \"Steps taken in the last 24 hours: \", this.state.pastStepCount), React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 9\n        }\n      }, \"Recent Step Count: \", this.state.currentStepCount), React.createElement(SafeAreaView, {\n        style: styles.massagecontainer,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 7\n        }\n      }, React.createElement(Text, {\n        style: [styles.massageheader, styles.massageparagraph],\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 12\n        }\n      }, \"Massager\"), React.createElement(Button, {\n        title: \"Vibrate once\",\n        onPress: function onPress() {\n          return Vibration.vibrate();\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 14\n        }\n      }), React.createElement(Separator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 12\n        }\n      }), Platform.OS == 'android' ? [React.createElement(View, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 17\n        }\n      }, React.createElement(Button, {\n        title: \"Vibrate for 10 seconds\",\n        onPress: function onPress() {\n          return Vibration.vibrate(10 * ONE_SECOND_IN_MS);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120,\n          columnNumber: 19\n        }\n      })), React.createElement(Separator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 17\n        }\n      })] : null, React.createElement(Text, {\n        style: styles.massageparagraph,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 11\n        }\n      }, \"Pattern: \", PATTERN_DESC), React.createElement(Button, {\n        title: \"Vibrate with pattern\",\n        onPress: function onPress() {\n          return Vibration.vibrate(PATTERN);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }\n      }), React.createElement(Separator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 11\n        }\n      }), React.createElement(Button, {\n        title: \"Vibrate with pattern until cancelled\",\n        onPress: function onPress() {\n          return Vibration.vibrate(PATTERN, true);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      }), React.createElement(Separator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }\n      }), React.createElement(Button, {\n        title: \"Stop vibration pattern\",\n        onPress: function onPress() {\n          return Vibration.cancel();\n        },\n        color: \"#FF0000\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }\n      }), React.createElement(Separator, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 11\n        }\n      }), React.createElement(Button, {\n        title: \"Close\",\n        onPress: function onPress() {\n          return _this3._hideModal();\n        },\n        color: \"#FF0000\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 11\n        }\n      })), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 7\n        }\n      }, \"Mental Health + Positive Messages\"), React.createElement(Text, {\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 7\n        }\n      }, \"Tools\"), React.createElement(View, {\n        style: styles.separator,\n        lightColor: \"#eee\",\n        darkColor: \"rgba(255,255,255,0.1)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 7\n        }\n      }, \"Scanner\"), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 7\n        }\n      }, \"Calculator\"), React.createElement(Text, {\n        style: styles.body,\n        onPress: this._showModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 7\n        }\n      }, \"Equations\"), React.createElement(Text, {\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: styles.title,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 7\n        }\n      }, \"General\"), React.createElement(View, {\n        style: styles.separator,\n        lightColor: \"#eee\",\n        darkColor: \"rgba(255,255,255,0.1)\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 7\n        }\n      }), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 7\n        }\n      }, \"Calendar\"), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 7\n        }\n      }, \"Daily Reminders (Homework, Exercise)\"), React.createElement(Text, {\n        style: styles.body,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 7\n        }\n      }, \"Timer (Pomo, Regular)\")), React.createElement(Modal, {\n        isVisible: this.state.isModalVisible,\n        style: {\n          backgroundColor: 'white'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 8\n        }\n      }, React.createElement(View, {\n        style: {\n          flex: 1\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }\n      }, \"Must work!\"), React.createElement(Text, {\n        onPress: this._hideModal,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 15\n        }\n      }, \"Hide Modal\"))));\n    }\n  }]);\n\n  return TabFourScreen;\n}(Component);\n\nexport { TabFourScreen as default };\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    justifyContent: 'center'\n  },\n  body: {\n    fontSize: 20,\n    fontWeight: 'normal',\n    flex: .1,\n    justifyContent: 'center'\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n    justifyContent: 'center'\n  },\n  massagecontainer: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: 44,\n    padding: 8\n  },\n  massageheader: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center'\n  },\n  massageparagraph: {\n    margin: 24,\n    textAlign: 'center'\n  },\n  massageseparator: {\n    marginVertical: 8,\n    borderBottomColor: '#737373',\n    borderBottomWidth: StyleSheet.hairlineWidth\n  }\n});","map":{"version":3,"sources":["C:/Users/prana/Desktop/iits-app-main/screens/TabFourScreen.tsx"],"names":["React","Component","ScrollView","Pedometer","Text","View","ONE_SECOND_IN_MS","PATTERN","PATTERN_DESC","Platform","OS","Modal","Separator","styles","separator","TabFourScreen","state","isModalVisible","isPedometerAvailable","pastStepCount","currentStepCount","_showModal","setState","_hideModal","_subscribe","_subscription","watchStepCount","result","steps","isAvailableAsync","then","String","error","end","Date","start","setDate","getDate","getStepCountAsync","_unsubscribe","remove","container","massagecontainer","title","body","massageheader","massageparagraph","Vibration","vibrate","cancel","backgroundColor","flex","StyleSheet","create","fontSize","fontWeight","justifyContent","marginVertical","height","width","paddingTop","padding","textAlign","margin","massageseparator","borderBottomColor","borderBottomWidth","hairlineWidth"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Button, Platform, Vibration, SafeAreaView, StyleSheet, FlatList } from 'react-native';\nimport {  ScrollView } from 'react-native-gesture-handler';\nimport { Pedometer } from \"expo-sensors\";\n\n\nimport { Text, View} from '../components/Themed';\nconst ONE_SECOND_IN_MS = 1;\n\n  const PATTERN = [1 * ONE_SECOND_IN_MS, 2 * ONE_SECOND_IN_MS, 3 * ONE_SECOND_IN_MS];\n\n  const PATTERN_DESC =\n    Platform.OS === 'android'\n      ? 'wait 1s, vibrate 2s, wait 3s'\n      : 'wait 1s, vibrate, wait 2s, vibrate, wait 3s';\nimport Modal from 'react-native-modal';\nconst Separator = () => {\n  return <View style={Platform.OS === 'android' ? styles.separator : null} />;\n};\nexport default class TabFourScreen extends Component {\n  state = {\n    isModalVisible: false,\n    isPedometerAvailable: \"checking\",\n    pastStepCount: 0,\n    currentStepCount: 0,\n  }\n  \n  _showModal = () => this.setState({ isModalVisible: true })\n \n  _hideModal = () => this.setState({ isModalVisible: false })\n \n\n\n\n  //PEDOMETER\n\n\n  componentDidMount() {\n    this._subscribe();\n  }\n\n  componentWillUnmount() {\n    this._unsubscribe();\n  }\n\n  _subscribe = () => {\n    this._subscription = Pedometer.watchStepCount(result => {\n      this.setState({\n        currentStepCount: result.steps\n      });\n    });\n\n    Pedometer.isAvailableAsync().then(\n      result => {\n        this.setState({\n          isPedometerAvailable: String(result)\n        });\n      },\n      error => {\n        this.setState({\n          isPedometerAvailable: \"Could not get isPedometerAvailable: \" + error\n        });\n      }\n    );\n\n    const end = new Date();\n    const start = new Date();\n    start.setDate(end.getDate() - 1);\n    Pedometer.getStepCountAsync(start, end).then(\n      result => {\n        this.setState({ pastStepCount: result.steps });\n      },\n      error => {\n        this.setState({\n          pastStepCount: \"Could not get stepCount: \" + error\n        });\n      }\n    );\n  };\n\n  _unsubscribe = () => {\n    this._subscription && this._subscription.remove();\n    this._subscription = null;\n  };\n\n  //PEDOMETER END \n  render () {\n    return (\n      // <View style={{ flex: 1 }}>\n      //   <Text>Enter</Text>\n      //   <Text>Enter</Text>\n      //   <Text onPress={this._showModal}>Enter</Text>\n      //   <TouchableOpacity>\n      //     <Text>Show Modal</Text>\n      //   </TouchableOpacity>\n        \n      // </View>\n      \n      <ScrollView style={styles.container}>\n      <SafeAreaView style={styles.massagecontainer}>\n      <Text style={styles.title}></Text>\n      <Text style={styles.title}>Health & Wellness</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> \n      <Text style={styles.body}>Pedometer</Text>   \n      <Text>\n          PedometerStatus: {this.state.isPedometerAvailable}\n        </Text>\n        <Text>\n          Steps taken in the last 24 hours: {this.state.pastStepCount}\n        </Text>\n        <Text>Recent Step Count: {this.state.currentStepCount}</Text>   \n      <SafeAreaView style={styles.massagecontainer}>\n           <Text style={[styles.massageheader, styles.massageparagraph]}>Massager</Text>\n             <Button title=\"Vibrate once\" onPress={() => Vibration.vibrate()} />\n\n           <Separator />\n           {Platform.OS == 'android'\n            ? [\n                <View>\n                  <Button\n                    title=\"Vibrate for 10 seconds\"\n                    onPress={() => Vibration.vibrate(10 * ONE_SECOND_IN_MS)}\n                  />\n                </View>,\n                <Separator />,\n              ]\n            : null}\n          <Text style={styles.massageparagraph}>Pattern: {PATTERN_DESC}</Text>\n          <Button title=\"Vibrate with pattern\" onPress={() => Vibration.vibrate(PATTERN)} />\n          <Separator />\n          <Button\n            title=\"Vibrate with pattern until cancelled\"\n            onPress={() => Vibration.vibrate(PATTERN, true)}\n          />\n          <Separator />\n          <Button title=\"Stop vibration pattern\" onPress={() => Vibration.cancel()} color=\"#FF0000\" />\n          <Separator />\n          <Button title=\"Close\" onPress={() => this._hideModal()} color=\"#FF0000\" />\n        </SafeAreaView>\n      <Text style={styles.body}>Mental Health + Positive Messages</Text>\n\n      <Text style={styles.title}></Text>\n      <Text style={styles.title}>Tools</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> \n      <Text style={styles.body}>Scanner</Text>      \n      <Text style={styles.body}>Calculator</Text>\n      <Text style={styles.body} onPress={this._showModal}>Equations</Text>\n\n      <Text style={styles.title}></Text>\n      <Text style={styles.title}>General</Text>\n      <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> \n      <Text style={styles.body}>Calendar</Text>      \n      <Text style={styles.body}>Daily Reminders (Homework, Exercise)</Text>\n      <Text style={styles.body}>Timer (Pomo, Regular)</Text>\n      </SafeAreaView>\n       <Modal isVisible={this.state.isModalVisible} style={{backgroundColor: 'white'}}>  \n          \n\n         \n          <View style={{ flex: 1 }}>\n            <Text>Must work!</Text>\n            \n              <Text onPress={this._hideModal}>Hide Modal</Text>\n            \n          </View>\n        </Modal>\n\n        \n    </ScrollView>\n\n\n    \n    )\n  }\n}\n\n\n\n// export default function TabFourScreen() {\n//   return (\n//     <View style={styles.container}>\n//       <Text style={styles.title}></Text>\n//       <Text style={styles.title}>Health & Wellness</Text>\n//       <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> \n//       <Text style={styles.body}>Pedometer</Text>      \n//       <Text style={styles.body}>Massager</Text>\n//       <Text style={styles.body}>Mental Health + Positive Messages</Text>\n\n//       <Text style={styles.title}></Text>\n//       <Text style={styles.title}>Tools</Text>\n//       <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> \n//       <Text style={styles.body}>Scanner</Text>      \n//       <Text style={styles.body}>Calculator</Text>\n\n//       <Text style={styles.title}></Text>\n//       <Text style={styles.title}>General</Text>\n//       <View style={styles.separator} lightColor=\"#eee\" darkColor=\"rgba(255,255,255,0.1)\" /> \n//       <Text style={styles.body}>Calendar</Text>      \n//       <Text style={styles.body}>Daily Reminders (Homework, Exercise)</Text>\n//       <Text style={styles.body}>Timer (Pomo, Regular)</Text>\n\n//       <Modal isVisible={this.state.isModalVisible} style={{backgroundColor: 'white'}}>\n//           <View style={{ flex: 1 }}>\n//             <Text>Must work!</Text>\n//             <TouchableOpacity onPress={this._hideModal}>\n//               <Text>Hide Modal</Text>\n//             </TouchableOpacity>\n//           </View>\n//         </Modal>\n//     </View>\n//   );\n// }\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    // alignItems: 'center',\n    // justifyContent: 'flex-start',\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: 'bold',\n    justifyContent: 'center',\n  },\n  body: {\n    fontSize: 20,\n    fontWeight: 'normal',\n    flex: .1,\n    justifyContent: 'center',\n\n  },\n  separator: {\n    marginVertical: 30,\n    height: 1,\n    width: '80%',\n    justifyContent: 'center',\n\n  },\n  massagecontainer: {\n    flex: 1,\n    justifyContent: 'center',\n    paddingTop: 44,\n    padding: 8,\n  },\n  massageheader: {\n    fontSize: 18,\n    fontWeight: 'bold',\n    textAlign: 'center',\n  },\n  massageparagraph: {\n    margin: 24,\n    textAlign: 'center',\n  },\n  massageseparator: {\n    marginVertical: 8,\n    borderBottomColor: '#737373',\n    borderBottomWidth: StyleSheet.hairlineWidth,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}